"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _static_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../static/style.css */ \"./static/style.css\");\n/* harmony import */ var _static_style_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_static_style_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _static_bootstrap_js_bootstrap_bundle_min_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../static/bootstrap/js/bootstrap.bundle.min.js */ \"./static/bootstrap/js/bootstrap.bundle.min.js\");\n/* harmony import */ var _static_bootstrap_js_bootstrap_bundle_min_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_static_bootstrap_js_bootstrap_bundle_min_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction MyApp(param) {\n    let { Component, pageProps } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n        ...pageProps\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\wesley santos\\\\Desktop\\\\teste\\\\pages\\\\_app.js\",\n        lineNumber: 6,\n        columnNumber: 10\n    }, this);\n}\n_c = MyApp;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MyApp);\nvar _c;\n$RefreshReg$(_c, \"MyApp\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQzZCO0FBQ3lCO0FBRXRELFNBQVNBLE1BQU0sS0FBd0I7UUFBeEIsRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUUsR0FBeEI7SUFDYixxQkFBTyw4REFBQ0Q7UUFBVyxHQUFHQyxTQUFTOzs7Ozs7QUFDakM7S0FGU0Y7QUFJVCwrREFBZUEsS0FBS0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9wYWdlcy9fYXBwLmpzP2UwYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCAnLi4vc3RhdGljL3N0eWxlLmNzcyc7XHJcbmltcG9ydCcuLi9zdGF0aWMvYm9vdHN0cmFwL2pzL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzJ1xyXG5cclxuZnVuY3Rpb24gTXlBcHAoeyBDb21wb25lbnQsIHBhZ2VQcm9wcyB9KSB7XHJcbiAgcmV0dXJuIDxDb21wb25lbnQgey4uLnBhZ2VQcm9wc30gLz5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTXlBcHA7XHJcbiJdLCJuYW1lcyI6WyJNeUFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_app.js\n"));

/***/ }),

/***/ "./static/bootstrap/js/bootstrap.bundle.min.js":
/*!*****************************************************!*\
  !*** ./static/bootstrap/js/bootstrap.bundle.min.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/*!\n  * Bootstrap v5.0.2 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */ \n!function(t, e) {\n     true ? module.exports = e() : 0;\n}(void 0, function() {\n    \"use strict\";\n    const t = {\n        find: function(t) {\n            let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document.documentElement;\n            return [].concat(...Element.prototype.querySelectorAll.call(e, t));\n        },\n        findOne: function(t) {\n            let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document.documentElement;\n            return Element.prototype.querySelector.call(e, t);\n        },\n        children: (t, e)=>[].concat(...t.children).filter((t)=>t.matches(e)),\n        parents (t, e) {\n            const i = [];\n            let n = t.parentNode;\n            for(; n && n.nodeType === Node.ELEMENT_NODE && 3 !== n.nodeType;)n.matches(e) && i.push(n), n = n.parentNode;\n            return i;\n        },\n        prev (t, e) {\n            let i = t.previousElementSibling;\n            for(; i;){\n                if (i.matches(e)) return [\n                    i\n                ];\n                i = i.previousElementSibling;\n            }\n            return [];\n        },\n        next (t, e) {\n            let i = t.nextElementSibling;\n            for(; i;){\n                if (i.matches(e)) return [\n                    i\n                ];\n                i = i.nextElementSibling;\n            }\n            return [];\n        }\n    }, e = (t)=>{\n        do {\n            t += Math.floor(1e6 * Math.random());\n        }while (document.getElementById(t));\n        return t;\n    }, i = (t)=>{\n        let e = t.getAttribute(\"data-bs-target\");\n        if (!e || \"#\" === e) {\n            let i = t.getAttribute(\"href\");\n            if (!i || !i.includes(\"#\") && !i.startsWith(\".\")) return null;\n            i.includes(\"#\") && !i.startsWith(\"#\") && (i = \"#\" + i.split(\"#\")[1]), e = i && \"#\" !== i ? i.trim() : null;\n        }\n        return e;\n    }, n = (t)=>{\n        const e = i(t);\n        return e && document.querySelector(e) ? e : null;\n    }, s = (t)=>{\n        const e = i(t);\n        return e ? document.querySelector(e) : null;\n    }, o = (t)=>{\n        t.dispatchEvent(new Event(\"transitionend\"));\n    }, r = (t)=>!(!t || \"object\" != typeof t) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType), a = (e)=>r(e) ? e.jquery ? e[0] : e : \"string\" == typeof e && e.length > 0 ? t.findOne(e) : null, l = (t, e, i)=>{\n        Object.keys(i).forEach((n)=>{\n            const s = i[n], o = e[n], a = o && r(o) ? \"element\" : null == (l = o) ? \"\" + l : ({}).toString.call(l).match(/\\s([a-z]+)/i)[1].toLowerCase();\n            var l;\n            if (!new RegExp(s).test(a)) throw new TypeError(\"\".concat(t.toUpperCase(), ': Option \"').concat(n, '\" provided type \"').concat(a, '\" but expected type \"').concat(s, '\".'));\n        });\n    }, c = (t)=>!(!r(t) || 0 === t.getClientRects().length) && \"visible\" === getComputedStyle(t).getPropertyValue(\"visibility\"), h = (t)=>!t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains(\"disabled\") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute(\"disabled\") && \"false\" !== t.getAttribute(\"disabled\")), d = (t)=>{\n        if (!document.documentElement.attachShadow) return null;\n        if (\"function\" == typeof t.getRootNode) {\n            const e = t.getRootNode();\n            return e instanceof ShadowRoot ? e : null;\n        }\n        return t instanceof ShadowRoot ? t : t.parentNode ? d(t.parentNode) : null;\n    }, u = ()=>{}, f = (t)=>t.offsetHeight, p = ()=>{\n        const { jQuery: t } = window;\n        return t && !document.body.hasAttribute(\"data-bs-no-jquery\") ? t : null;\n    }, m = [], g = ()=>\"rtl\" === document.documentElement.dir, _ = (t)=>{\n        var e;\n        e = ()=>{\n            const e = p();\n            if (e) {\n                const i = t.NAME, n = e.fn[i];\n                e.fn[i] = t.jQueryInterface, e.fn[i].Constructor = t, e.fn[i].noConflict = ()=>(e.fn[i] = n, t.jQueryInterface);\n            }\n        }, \"loading\" === document.readyState ? (m.length || document.addEventListener(\"DOMContentLoaded\", ()=>{\n            m.forEach((t)=>t());\n        }), m.push(e)) : e();\n    }, b = (t)=>{\n        \"function\" == typeof t && t();\n    }, v = function(t, e) {\n        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n        if (!i) return void b(t);\n        const n = ((t)=>{\n            if (!t) return 0;\n            let { transitionDuration: e, transitionDelay: i } = window.getComputedStyle(t);\n            const n = Number.parseFloat(e), s = Number.parseFloat(i);\n            return n || s ? (e = e.split(\",\")[0], i = i.split(\",\")[0], 1e3 * (Number.parseFloat(e) + Number.parseFloat(i))) : 0;\n        })(e) + 5;\n        let s = !1;\n        const r = (param)=>{\n            let { target: i } = param;\n            i === e && (s = !0, e.removeEventListener(\"transitionend\", r), b(t));\n        };\n        e.addEventListener(\"transitionend\", r), setTimeout(()=>{\n            s || o(e);\n        }, n);\n    }, y = (t, e, i, n)=>{\n        let s = t.indexOf(e);\n        if (-1 === s) return t[!i && n ? t.length - 1 : 0];\n        const o = t.length;\n        return s += i ? 1 : -1, n && (s = (s + o) % o), t[Math.max(0, Math.min(s, o - 1))];\n    }, w = /[^.]*(?=\\..*)\\.|.*/, E = /\\..*/, A = /::\\d+$/, T = {};\n    let O = 1;\n    const C = {\n        mouseenter: \"mouseover\",\n        mouseleave: \"mouseout\"\n    }, k = /^(mouseenter|mouseleave)/i, L = new Set([\n        \"click\",\n        \"dblclick\",\n        \"mouseup\",\n        \"mousedown\",\n        \"contextmenu\",\n        \"mousewheel\",\n        \"DOMMouseScroll\",\n        \"mouseover\",\n        \"mouseout\",\n        \"mousemove\",\n        \"selectstart\",\n        \"selectend\",\n        \"keydown\",\n        \"keypress\",\n        \"keyup\",\n        \"orientationchange\",\n        \"touchstart\",\n        \"touchmove\",\n        \"touchend\",\n        \"touchcancel\",\n        \"pointerdown\",\n        \"pointermove\",\n        \"pointerup\",\n        \"pointerleave\",\n        \"pointercancel\",\n        \"gesturestart\",\n        \"gesturechange\",\n        \"gestureend\",\n        \"focus\",\n        \"blur\",\n        \"change\",\n        \"reset\",\n        \"select\",\n        \"submit\",\n        \"focusin\",\n        \"focusout\",\n        \"load\",\n        \"unload\",\n        \"beforeunload\",\n        \"resize\",\n        \"move\",\n        \"DOMContentLoaded\",\n        \"readystatechange\",\n        \"error\",\n        \"abort\",\n        \"scroll\"\n    ]);\n    function x(t, e) {\n        return e && \"\".concat(e, \"::\").concat(O++) || t.uidEvent || O++;\n    }\n    function D(t) {\n        const e = x(t);\n        return t.uidEvent = e, T[e] = T[e] || {}, T[e];\n    }\n    function S(t, e) {\n        let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        const n = Object.keys(t);\n        for(let s = 0, o = n.length; s < o; s++){\n            const o = t[n[s]];\n            if (o.originalHandler === e && o.delegationSelector === i) return o;\n        }\n        return null;\n    }\n    function I(t, e, i) {\n        const n = \"string\" == typeof e, s = n ? i : e;\n        let o = M(t);\n        return L.has(o) || (o = t), [\n            n,\n            s,\n            o\n        ];\n    }\n    function N(t, e, i, n, s) {\n        if (\"string\" != typeof e || !t) return;\n        if (i || (i = n, n = null), k.test(e)) {\n            const t = (t)=>function(e) {\n                    if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return t.call(this, e);\n                };\n            n ? n = t(n) : i = t(i);\n        }\n        const [o, r, a] = I(e, i, n), l = D(t), c = l[a] || (l[a] = {}), h = S(c, r, o ? i : null);\n        if (h) return void (h.oneOff = h.oneOff && s);\n        const d = x(r, e.replace(w, \"\")), u = o ? function(t, e, i) {\n            return function n(s) {\n                const o = t.querySelectorAll(e);\n                for(let { target: r } = s; r && r !== this; r = r.parentNode)for(let a = o.length; a--;)if (o[a] === r) return s.delegateTarget = r, n.oneOff && P.off(t, s.type, e, i), i.apply(r, [\n                    s\n                ]);\n                return null;\n            };\n        }(t, i, n) : function(t, e) {\n            return function i(n) {\n                return n.delegateTarget = t, i.oneOff && P.off(t, n.type, e), e.apply(t, [\n                    n\n                ]);\n            };\n        }(t, i);\n        u.delegationSelector = o ? i : null, u.originalHandler = r, u.oneOff = s, u.uidEvent = d, c[d] = u, t.addEventListener(a, u, o);\n    }\n    function j(t, e, i, n, s) {\n        const o = S(e[i], n, s);\n        o && (t.removeEventListener(i, o, Boolean(s)), delete e[i][o.uidEvent]);\n    }\n    function M(t) {\n        return t = t.replace(E, \"\"), C[t] || t;\n    }\n    const P = {\n        on (t, e, i, n) {\n            N(t, e, i, n, !1);\n        },\n        one (t, e, i, n) {\n            N(t, e, i, n, !0);\n        },\n        off (t, e, i, n) {\n            if (\"string\" != typeof e || !t) return;\n            const [s, o, r] = I(e, i, n), a = r !== e, l = D(t), c = e.startsWith(\".\");\n            if (void 0 !== o) {\n                if (!l || !l[r]) return;\n                return void j(t, l, r, o, s ? i : null);\n            }\n            c && Object.keys(l).forEach((i)=>{\n                !function(t, e, i, n) {\n                    const s = e[i] || {};\n                    Object.keys(s).forEach((o)=>{\n                        if (o.includes(n)) {\n                            const n = s[o];\n                            j(t, e, i, n.originalHandler, n.delegationSelector);\n                        }\n                    });\n                }(t, l, i, e.slice(1));\n            });\n            const h = l[r] || {};\n            Object.keys(h).forEach((i)=>{\n                const n = i.replace(A, \"\");\n                if (!a || e.includes(n)) {\n                    const e = h[i];\n                    j(t, l, r, e.originalHandler, e.delegationSelector);\n                }\n            });\n        },\n        trigger (t, e, i) {\n            if (\"string\" != typeof e || !t) return null;\n            const n = p(), s = M(e), o = e !== s, r = L.has(s);\n            let a, l = !0, c = !0, h = !1, d = null;\n            return o && n && (a = n.Event(e, i), n(t).trigger(a), l = !a.isPropagationStopped(), c = !a.isImmediatePropagationStopped(), h = a.isDefaultPrevented()), r ? (d = document.createEvent(\"HTMLEvents\"), d.initEvent(s, l, !0)) : d = new CustomEvent(e, {\n                bubbles: l,\n                cancelable: !0\n            }), void 0 !== i && Object.keys(i).forEach((t)=>{\n                Object.defineProperty(d, t, {\n                    get: ()=>i[t]\n                });\n            }), h && d.preventDefault(), c && t.dispatchEvent(d), d.defaultPrevented && void 0 !== a && a.preventDefault(), d;\n        }\n    }, H = new Map;\n    var R = {\n        set (t, e, i) {\n            H.has(t) || H.set(t, new Map);\n            const n = H.get(t);\n            n.has(e) || 0 === n.size ? n.set(e, i) : console.error(\"Bootstrap doesn't allow more than one instance per element. Bound instance: \".concat(Array.from(n.keys())[0], \".\"));\n        },\n        get: (t, e)=>H.has(t) && H.get(t).get(e) || null,\n        remove (t, e) {\n            if (!H.has(t)) return;\n            const i = H.get(t);\n            i.delete(e), 0 === i.size && H.delete(t);\n        }\n    };\n    class B {\n        dispose() {\n            R.remove(this._element, this.constructor.DATA_KEY), P.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach((t)=>{\n                this[t] = null;\n            });\n        }\n        _queueCallback(t, e) {\n            let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n            v(t, e, i);\n        }\n        static getInstance(t) {\n            return R.get(t, this.DATA_KEY);\n        }\n        static getOrCreateInstance(t) {\n            let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return this.getInstance(t) || new this(t, \"object\" == typeof e ? e : null);\n        }\n        static get VERSION() {\n            return \"5.0.2\";\n        }\n        static get NAME() {\n            throw new Error('You have to implement the static method \"NAME\", for each component!');\n        }\n        static get DATA_KEY() {\n            return \"bs.\" + this.NAME;\n        }\n        static get EVENT_KEY() {\n            return \".\" + this.DATA_KEY;\n        }\n        constructor(t){\n            (t = a(t)) && (this._element = t, R.set(this._element, this.constructor.DATA_KEY, this));\n        }\n    }\n    class W extends B {\n        static get NAME() {\n            return \"alert\";\n        }\n        close(t) {\n            const e = t ? this._getRootElement(t) : this._element, i = this._triggerCloseEvent(e);\n            null === i || i.defaultPrevented || this._removeElement(e);\n        }\n        _getRootElement(t) {\n            return s(t) || t.closest(\".alert\");\n        }\n        _triggerCloseEvent(t) {\n            return P.trigger(t, \"close.bs.alert\");\n        }\n        _removeElement(t) {\n            t.classList.remove(\"show\");\n            const e = t.classList.contains(\"fade\");\n            this._queueCallback(()=>this._destroyElement(t), t, e);\n        }\n        _destroyElement(t) {\n            t.remove(), P.trigger(t, \"closed.bs.alert\");\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = W.getOrCreateInstance(this);\n                \"close\" === t && e[t](this);\n            });\n        }\n        static handleDismiss(t) {\n            return function(e) {\n                e && e.preventDefault(), t.close(this);\n            };\n        }\n    }\n    P.on(document, \"click.bs.alert.data-api\", '[data-bs-dismiss=\"alert\"]', W.handleDismiss(new W)), _(W);\n    class q extends B {\n        static get NAME() {\n            return \"button\";\n        }\n        toggle() {\n            this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(\"active\"));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = q.getOrCreateInstance(this);\n                \"toggle\" === t && e[t]();\n            });\n        }\n    }\n    function z(t) {\n        return \"true\" === t || \"false\" !== t && (t === Number(t).toString() ? Number(t) : \"\" === t || \"null\" === t ? null : t);\n    }\n    function $(t) {\n        return t.replace(/[A-Z]/g, (t)=>\"-\" + t.toLowerCase());\n    }\n    P.on(document, \"click.bs.button.data-api\", '[data-bs-toggle=\"button\"]', (t)=>{\n        t.preventDefault();\n        const e = t.target.closest('[data-bs-toggle=\"button\"]');\n        q.getOrCreateInstance(e).toggle();\n    }), _(q);\n    const U = {\n        setDataAttribute (t, e, i) {\n            t.setAttribute(\"data-bs-\" + $(e), i);\n        },\n        removeDataAttribute (t, e) {\n            t.removeAttribute(\"data-bs-\" + $(e));\n        },\n        getDataAttributes (t) {\n            if (!t) return {};\n            const e = {};\n            return Object.keys(t.dataset).filter((t)=>t.startsWith(\"bs\")).forEach((i)=>{\n                let n = i.replace(/^bs/, \"\");\n                n = n.charAt(0).toLowerCase() + n.slice(1, n.length), e[n] = z(t.dataset[i]);\n            }), e;\n        },\n        getDataAttribute: (t, e)=>z(t.getAttribute(\"data-bs-\" + $(e))),\n        offset (t) {\n            const e = t.getBoundingClientRect();\n            return {\n                top: e.top + document.body.scrollTop,\n                left: e.left + document.body.scrollLeft\n            };\n        },\n        position: (t)=>({\n                top: t.offsetTop,\n                left: t.offsetLeft\n            })\n    }, F = {\n        interval: 5e3,\n        keyboard: !0,\n        slide: !1,\n        pause: \"hover\",\n        wrap: !0,\n        touch: !0\n    }, V = {\n        interval: \"(number|boolean)\",\n        keyboard: \"boolean\",\n        slide: \"(boolean|string)\",\n        pause: \"(string|boolean)\",\n        wrap: \"boolean\",\n        touch: \"boolean\"\n    }, K = \"next\", X = \"prev\", Y = \"left\", Q = \"right\", G = {\n        ArrowLeft: Q,\n        ArrowRight: Y\n    };\n    class Z extends B {\n        static get Default() {\n            return F;\n        }\n        static get NAME() {\n            return \"carousel\";\n        }\n        next() {\n            this._slide(K);\n        }\n        nextWhenVisible() {\n            !document.hidden && c(this._element) && this.next();\n        }\n        prev() {\n            this._slide(X);\n        }\n        pause(e) {\n            e || (this._isPaused = !0), t.findOne(\".carousel-item-next, .carousel-item-prev\", this._element) && (o(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n        }\n        cycle(t) {\n            t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n        }\n        to(e) {\n            this._activeElement = t.findOne(\".active.carousel-item\", this._element);\n            const i = this._getItemIndex(this._activeElement);\n            if (e > this._items.length - 1 || e < 0) return;\n            if (this._isSliding) return void P.one(this._element, \"slid.bs.carousel\", ()=>this.to(e));\n            if (i === e) return this.pause(), void this.cycle();\n            const n = e > i ? K : X;\n            this._slide(n, this._items[e]);\n        }\n        _getConfig(t) {\n            return t = {\n                ...F,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t ? t : {}\n            }, l(\"carousel\", t, V), t;\n        }\n        _handleSwipe() {\n            const t = Math.abs(this.touchDeltaX);\n            if (t <= 40) return;\n            const e = t / this.touchDeltaX;\n            this.touchDeltaX = 0, e && this._slide(e > 0 ? Q : Y);\n        }\n        _addEventListeners() {\n            this._config.keyboard && P.on(this._element, \"keydown.bs.carousel\", (t)=>this._keydown(t)), \"hover\" === this._config.pause && (P.on(this._element, \"mouseenter.bs.carousel\", (t)=>this.pause(t)), P.on(this._element, \"mouseleave.bs.carousel\", (t)=>this.cycle(t))), this._config.touch && this._touchSupported && this._addTouchEventListeners();\n        }\n        _addTouchEventListeners() {\n            const e = (t)=>{\n                !this._pointerEvent || \"pen\" !== t.pointerType && \"touch\" !== t.pointerType ? this._pointerEvent || (this.touchStartX = t.touches[0].clientX) : this.touchStartX = t.clientX;\n            }, i = (t)=>{\n                this.touchDeltaX = t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this.touchStartX;\n            }, n = (t)=>{\n                !this._pointerEvent || \"pen\" !== t.pointerType && \"touch\" !== t.pointerType || (this.touchDeltaX = t.clientX - this.touchStartX), this._handleSwipe(), \"hover\" === this._config.pause && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout((t)=>this.cycle(t), 500 + this._config.interval));\n            };\n            t.find(\".carousel-item img\", this._element).forEach((t)=>{\n                P.on(t, \"dragstart.bs.carousel\", (t)=>t.preventDefault());\n            }), this._pointerEvent ? (P.on(this._element, \"pointerdown.bs.carousel\", (t)=>e(t)), P.on(this._element, \"pointerup.bs.carousel\", (t)=>n(t)), this._element.classList.add(\"pointer-event\")) : (P.on(this._element, \"touchstart.bs.carousel\", (t)=>e(t)), P.on(this._element, \"touchmove.bs.carousel\", (t)=>i(t)), P.on(this._element, \"touchend.bs.carousel\", (t)=>n(t)));\n        }\n        _keydown(t) {\n            if (/input|textarea/i.test(t.target.tagName)) return;\n            const e = G[t.key];\n            e && (t.preventDefault(), this._slide(e));\n        }\n        _getItemIndex(e) {\n            return this._items = e && e.parentNode ? t.find(\".carousel-item\", e.parentNode) : [], this._items.indexOf(e);\n        }\n        _getItemByOrder(t, e) {\n            const i = t === K;\n            return y(this._items, e, i, this._config.wrap);\n        }\n        _triggerSlideEvent(e, i) {\n            const n = this._getItemIndex(e), s = this._getItemIndex(t.findOne(\".active.carousel-item\", this._element));\n            return P.trigger(this._element, \"slide.bs.carousel\", {\n                relatedTarget: e,\n                direction: i,\n                from: s,\n                to: n\n            });\n        }\n        _setActiveIndicatorElement(e) {\n            if (this._indicatorsElement) {\n                const i = t.findOne(\".active\", this._indicatorsElement);\n                i.classList.remove(\"active\"), i.removeAttribute(\"aria-current\");\n                const n = t.find(\"[data-bs-target]\", this._indicatorsElement);\n                for(let t = 0; t < n.length; t++)if (Number.parseInt(n[t].getAttribute(\"data-bs-slide-to\"), 10) === this._getItemIndex(e)) {\n                    n[t].classList.add(\"active\"), n[t].setAttribute(\"aria-current\", \"true\");\n                    break;\n                }\n            }\n        }\n        _updateInterval() {\n            const e = this._activeElement || t.findOne(\".active.carousel-item\", this._element);\n            if (!e) return;\n            const i = Number.parseInt(e.getAttribute(\"data-bs-interval\"), 10);\n            i ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = i) : this._config.interval = this._config.defaultInterval || this._config.interval;\n        }\n        _slide(e, i) {\n            const n = this._directionToOrder(e), s = t.findOne(\".active.carousel-item\", this._element), o = this._getItemIndex(s), r = i || this._getItemByOrder(n, s), a = this._getItemIndex(r), l = Boolean(this._interval), c = n === K, h = c ? \"carousel-item-start\" : \"carousel-item-end\", d = c ? \"carousel-item-next\" : \"carousel-item-prev\", u = this._orderToDirection(n);\n            if (r && r.classList.contains(\"active\")) return void (this._isSliding = !1);\n            if (this._isSliding) return;\n            if (this._triggerSlideEvent(r, u).defaultPrevented) return;\n            if (!s || !r) return;\n            this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(r), this._activeElement = r;\n            const p = ()=>{\n                P.trigger(this._element, \"slid.bs.carousel\", {\n                    relatedTarget: r,\n                    direction: u,\n                    from: o,\n                    to: a\n                });\n            };\n            if (this._element.classList.contains(\"slide\")) {\n                r.classList.add(d), f(r), s.classList.add(h), r.classList.add(h);\n                const t = ()=>{\n                    r.classList.remove(h, d), r.classList.add(\"active\"), s.classList.remove(\"active\", d, h), this._isSliding = !1, setTimeout(p, 0);\n                };\n                this._queueCallback(t, s, !0);\n            } else s.classList.remove(\"active\"), r.classList.add(\"active\"), this._isSliding = !1, p();\n            l && this.cycle();\n        }\n        _directionToOrder(t) {\n            return [\n                Q,\n                Y\n            ].includes(t) ? g() ? t === Y ? X : K : t === Y ? K : X : t;\n        }\n        _orderToDirection(t) {\n            return [\n                K,\n                X\n            ].includes(t) ? g() ? t === X ? Y : Q : t === X ? Q : Y : t;\n        }\n        static carouselInterface(t, e) {\n            const i = Z.getOrCreateInstance(t, e);\n            let { _config: n } = i;\n            \"object\" == typeof e && (n = {\n                ...n,\n                ...e\n            });\n            const s = \"string\" == typeof e ? e : n.slide;\n            if (\"number\" == typeof e) i.to(e);\n            else if (\"string\" == typeof s) {\n                if (void 0 === i[s]) throw new TypeError('No method named \"'.concat(s, '\"'));\n                i[s]();\n            } else n.interval && n.ride && (i.pause(), i.cycle());\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                Z.carouselInterface(this, t);\n            });\n        }\n        static dataApiClickHandler(t) {\n            const e = s(this);\n            if (!e || !e.classList.contains(\"carousel\")) return;\n            const i = {\n                ...U.getDataAttributes(e),\n                ...U.getDataAttributes(this)\n            }, n = this.getAttribute(\"data-bs-slide-to\");\n            n && (i.interval = !1), Z.carouselInterface(e, i), n && Z.getInstance(e).to(n), t.preventDefault();\n        }\n        constructor(e, i){\n            super(e), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(i), this._indicatorsElement = t.findOne(\".carousel-indicators\", this._element), this._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = Boolean(window.PointerEvent), this._addEventListeners();\n        }\n    }\n    P.on(document, \"click.bs.carousel.data-api\", \"[data-bs-slide], [data-bs-slide-to]\", Z.dataApiClickHandler), P.on(window, \"load.bs.carousel.data-api\", ()=>{\n        const e = t.find('[data-bs-ride=\"carousel\"]');\n        for(let t = 0, i = e.length; t < i; t++)Z.carouselInterface(e[t], Z.getInstance(e[t]));\n    }), _(Z);\n    const J = {\n        toggle: !0,\n        parent: \"\"\n    }, tt = {\n        toggle: \"boolean\",\n        parent: \"(string|element)\"\n    };\n    class et extends B {\n        static get Default() {\n            return J;\n        }\n        static get NAME() {\n            return \"collapse\";\n        }\n        toggle() {\n            this._element.classList.contains(\"show\") ? this.hide() : this.show();\n        }\n        show() {\n            if (this._isTransitioning || this._element.classList.contains(\"show\")) return;\n            let e, i;\n            this._parent && (e = t.find(\".show, .collapsing\", this._parent).filter((t)=>\"string\" == typeof this._config.parent ? t.getAttribute(\"data-bs-parent\") === this._config.parent : t.classList.contains(\"collapse\")), 0 === e.length && (e = null));\n            const n = t.findOne(this._selector);\n            if (e) {\n                const t = e.find((t)=>n !== t);\n                if (i = t ? et.getInstance(t) : null, i && i._isTransitioning) return;\n            }\n            if (P.trigger(this._element, \"show.bs.collapse\").defaultPrevented) return;\n            e && e.forEach((t)=>{\n                n !== t && et.collapseInterface(t, \"hide\"), i || R.set(t, \"bs.collapse\", null);\n            });\n            const s = this._getDimension();\n            this._element.classList.remove(\"collapse\"), this._element.classList.add(\"collapsing\"), this._element.style[s] = 0, this._triggerArray.length && this._triggerArray.forEach((t)=>{\n                t.classList.remove(\"collapsed\"), t.setAttribute(\"aria-expanded\", !0);\n            }), this.setTransitioning(!0);\n            const o = \"scroll\" + (s[0].toUpperCase() + s.slice(1));\n            this._queueCallback(()=>{\n                this._element.classList.remove(\"collapsing\"), this._element.classList.add(\"collapse\", \"show\"), this._element.style[s] = \"\", this.setTransitioning(!1), P.trigger(this._element, \"shown.bs.collapse\");\n            }, this._element, !0), this._element.style[s] = this._element[o] + \"px\";\n        }\n        hide() {\n            if (this._isTransitioning || !this._element.classList.contains(\"show\")) return;\n            if (P.trigger(this._element, \"hide.bs.collapse\").defaultPrevented) return;\n            const t = this._getDimension();\n            this._element.style[t] = this._element.getBoundingClientRect()[t] + \"px\", f(this._element), this._element.classList.add(\"collapsing\"), this._element.classList.remove(\"collapse\", \"show\");\n            const e = this._triggerArray.length;\n            if (e > 0) for(let t = 0; t < e; t++){\n                const e = this._triggerArray[t], i = s(e);\n                i && !i.classList.contains(\"show\") && (e.classList.add(\"collapsed\"), e.setAttribute(\"aria-expanded\", !1));\n            }\n            this.setTransitioning(!0), this._element.style[t] = \"\", this._queueCallback(()=>{\n                this.setTransitioning(!1), this._element.classList.remove(\"collapsing\"), this._element.classList.add(\"collapse\"), P.trigger(this._element, \"hidden.bs.collapse\");\n            }, this._element, !0);\n        }\n        setTransitioning(t) {\n            this._isTransitioning = t;\n        }\n        _getConfig(t) {\n            return (t = {\n                ...J,\n                ...t\n            }).toggle = Boolean(t.toggle), l(\"collapse\", t, tt), t;\n        }\n        _getDimension() {\n            return this._element.classList.contains(\"width\") ? \"width\" : \"height\";\n        }\n        _getParent() {\n            let { parent: e } = this._config;\n            e = a(e);\n            const i = '[data-bs-toggle=\"collapse\"][data-bs-parent=\"'.concat(e, '\"]');\n            return t.find(i, e).forEach((t)=>{\n                const e = s(t);\n                this._addAriaAndCollapsedClass(e, [\n                    t\n                ]);\n            }), e;\n        }\n        _addAriaAndCollapsedClass(t, e) {\n            if (!t || !e.length) return;\n            const i = t.classList.contains(\"show\");\n            e.forEach((t)=>{\n                i ? t.classList.remove(\"collapsed\") : t.classList.add(\"collapsed\"), t.setAttribute(\"aria-expanded\", i);\n            });\n        }\n        static collapseInterface(t, e) {\n            let i = et.getInstance(t);\n            const n = {\n                ...J,\n                ...U.getDataAttributes(t),\n                ...\"object\" == typeof e && e ? e : {}\n            };\n            if (!i && n.toggle && \"string\" == typeof e && /show|hide/.test(e) && (n.toggle = !1), i || (i = new et(t, n)), \"string\" == typeof e) {\n                if (void 0 === i[e]) throw new TypeError('No method named \"'.concat(e, '\"'));\n                i[e]();\n            }\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                et.collapseInterface(this, t);\n            });\n        }\n        constructor(e, i){\n            super(e), this._isTransitioning = !1, this._config = this._getConfig(i), this._triggerArray = t.find('[data-bs-toggle=\"collapse\"][href=\"#'.concat(this._element.id, '\"],[data-bs-toggle=\"collapse\"][data-bs-target=\"#').concat(this._element.id, '\"]'));\n            const s = t.find('[data-bs-toggle=\"collapse\"]');\n            for(let e = 0, i = s.length; e < i; e++){\n                const i = s[e], o = n(i), r = t.find(o).filter((t)=>t === this._element);\n                null !== o && r.length && (this._selector = o, this._triggerArray.push(i));\n            }\n            this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();\n        }\n    }\n    P.on(document, \"click.bs.collapse.data-api\", '[data-bs-toggle=\"collapse\"]', function(e) {\n        (\"A\" === e.target.tagName || e.delegateTarget && \"A\" === e.delegateTarget.tagName) && e.preventDefault();\n        const i = U.getDataAttributes(this), s = n(this);\n        t.find(s).forEach((t)=>{\n            const e = et.getInstance(t);\n            let n;\n            e ? (null === e._parent && \"string\" == typeof i.parent && (e._config.parent = i.parent, e._parent = e._getParent()), n = \"toggle\") : n = i, et.collapseInterface(t, n);\n        });\n    }), _(et);\n    var it = \"top\", nt = \"bottom\", st = \"right\", ot = \"left\", rt = [\n        it,\n        nt,\n        st,\n        ot\n    ], at = rt.reduce(function(t, e) {\n        return t.concat([\n            e + \"-start\",\n            e + \"-end\"\n        ]);\n    }, []), lt = [].concat(rt, [\n        \"auto\"\n    ]).reduce(function(t, e) {\n        return t.concat([\n            e,\n            e + \"-start\",\n            e + \"-end\"\n        ]);\n    }, []), ct = [\n        \"beforeRead\",\n        \"read\",\n        \"afterRead\",\n        \"beforeMain\",\n        \"main\",\n        \"afterMain\",\n        \"beforeWrite\",\n        \"write\",\n        \"afterWrite\"\n    ];\n    function ht(t) {\n        return t ? (t.nodeName || \"\").toLowerCase() : null;\n    }\n    function dt(t) {\n        if (null == t) return window;\n        if (\"[object Window]\" !== t.toString()) {\n            var e = t.ownerDocument;\n            return e && e.defaultView || window;\n        }\n        return t;\n    }\n    function ut(t) {\n        return t instanceof dt(t).Element || t instanceof Element;\n    }\n    function ft(t) {\n        return t instanceof dt(t).HTMLElement || t instanceof HTMLElement;\n    }\n    function pt(t) {\n        return \"undefined\" != typeof ShadowRoot && (t instanceof dt(t).ShadowRoot || t instanceof ShadowRoot);\n    }\n    var mt = {\n        name: \"applyStyles\",\n        enabled: !0,\n        phase: \"write\",\n        fn: function(t) {\n            var e = t.state;\n            Object.keys(e.elements).forEach(function(t) {\n                var i = e.styles[t] || {}, n = e.attributes[t] || {}, s = e.elements[t];\n                ft(s) && ht(s) && (Object.assign(s.style, i), Object.keys(n).forEach(function(t) {\n                    var e = n[t];\n                    !1 === e ? s.removeAttribute(t) : s.setAttribute(t, !0 === e ? \"\" : e);\n                }));\n            });\n        },\n        effect: function(t) {\n            var e = t.state, i = {\n                popper: {\n                    position: e.options.strategy,\n                    left: \"0\",\n                    top: \"0\",\n                    margin: \"0\"\n                },\n                arrow: {\n                    position: \"absolute\"\n                },\n                reference: {}\n            };\n            return Object.assign(e.elements.popper.style, i.popper), e.styles = i, e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow), function() {\n                Object.keys(e.elements).forEach(function(t) {\n                    var n = e.elements[t], s = e.attributes[t] || {}, o = Object.keys(e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]).reduce(function(t, e) {\n                        return t[e] = \"\", t;\n                    }, {});\n                    ft(n) && ht(n) && (Object.assign(n.style, o), Object.keys(s).forEach(function(t) {\n                        n.removeAttribute(t);\n                    }));\n                });\n            };\n        },\n        requires: [\n            \"computeStyles\"\n        ]\n    };\n    function gt(t) {\n        return t.split(\"-\")[0];\n    }\n    function _t(t) {\n        var e = t.getBoundingClientRect();\n        return {\n            width: e.width,\n            height: e.height,\n            top: e.top,\n            right: e.right,\n            bottom: e.bottom,\n            left: e.left,\n            x: e.left,\n            y: e.top\n        };\n    }\n    function bt(t) {\n        var e = _t(t), i = t.offsetWidth, n = t.offsetHeight;\n        return Math.abs(e.width - i) <= 1 && (i = e.width), Math.abs(e.height - n) <= 1 && (n = e.height), {\n            x: t.offsetLeft,\n            y: t.offsetTop,\n            width: i,\n            height: n\n        };\n    }\n    function vt(t, e) {\n        var i = e.getRootNode && e.getRootNode();\n        if (t.contains(e)) return !0;\n        if (i && pt(i)) {\n            var n = e;\n            do {\n                if (n && t.isSameNode(n)) return !0;\n                n = n.parentNode || n.host;\n            }while (n);\n        }\n        return !1;\n    }\n    function yt(t) {\n        return dt(t).getComputedStyle(t);\n    }\n    function wt(t) {\n        return [\n            \"table\",\n            \"td\",\n            \"th\"\n        ].indexOf(ht(t)) >= 0;\n    }\n    function Et(t) {\n        return ((ut(t) ? t.ownerDocument : t.document) || window.document).documentElement;\n    }\n    function At(t) {\n        return \"html\" === ht(t) ? t : t.assignedSlot || t.parentNode || (pt(t) ? t.host : null) || Et(t);\n    }\n    function Tt(t) {\n        return ft(t) && \"fixed\" !== yt(t).position ? t.offsetParent : null;\n    }\n    function Ot(t) {\n        for(var e = dt(t), i = Tt(t); i && wt(i) && \"static\" === yt(i).position;)i = Tt(i);\n        return i && (\"html\" === ht(i) || \"body\" === ht(i) && \"static\" === yt(i).position) ? e : i || function(t) {\n            var e = -1 !== navigator.userAgent.toLowerCase().indexOf(\"firefox\");\n            if (-1 !== navigator.userAgent.indexOf(\"Trident\") && ft(t) && \"fixed\" === yt(t).position) return null;\n            for(var i = At(t); ft(i) && [\n                \"html\",\n                \"body\"\n            ].indexOf(ht(i)) < 0;){\n                var n = yt(i);\n                if (\"none\" !== n.transform || \"none\" !== n.perspective || \"paint\" === n.contain || -1 !== [\n                    \"transform\",\n                    \"perspective\"\n                ].indexOf(n.willChange) || e && \"filter\" === n.willChange || e && n.filter && \"none\" !== n.filter) return i;\n                i = i.parentNode;\n            }\n            return null;\n        }(t) || e;\n    }\n    function Ct(t) {\n        return [\n            \"top\",\n            \"bottom\"\n        ].indexOf(t) >= 0 ? \"x\" : \"y\";\n    }\n    var kt = Math.max, Lt = Math.min, xt = Math.round;\n    function Dt(t, e, i) {\n        return kt(t, Lt(e, i));\n    }\n    function St(t) {\n        return Object.assign({}, {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }, t);\n    }\n    function It(t, e) {\n        return e.reduce(function(e, i) {\n            return e[i] = t, e;\n        }, {});\n    }\n    var Nt = {\n        name: \"arrow\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e, i = t.state, n = t.name, s = t.options, o = i.elements.arrow, r = i.modifiersData.popperOffsets, a = gt(i.placement), l = Ct(a), c = [\n                ot,\n                st\n            ].indexOf(a) >= 0 ? \"height\" : \"width\";\n            if (o && r) {\n                var h = function(t, e) {\n                    return St(\"number\" != typeof (t = \"function\" == typeof t ? t(Object.assign({}, e.rects, {\n                        placement: e.placement\n                    })) : t) ? t : It(t, rt));\n                }(s.padding, i), d = bt(o), u = \"y\" === l ? it : ot, f = \"y\" === l ? nt : st, p = i.rects.reference[c] + i.rects.reference[l] - r[l] - i.rects.popper[c], m = r[l] - i.rects.reference[l], g = Ot(o), _ = g ? \"y\" === l ? g.clientHeight || 0 : g.clientWidth || 0 : 0, b = p / 2 - m / 2, v = h[u], y = _ - d[c] - h[f], w = _ / 2 - d[c] / 2 + b, E = Dt(v, w, y), A = l;\n                i.modifiersData[n] = ((e = {})[A] = E, e.centerOffset = E - w, e);\n            }\n        },\n        effect: function(t) {\n            var e = t.state, i = t.options.element, n = void 0 === i ? \"[data-popper-arrow]\" : i;\n            null != n && (\"string\" != typeof n || (n = e.elements.popper.querySelector(n))) && vt(e.elements.popper, n) && (e.elements.arrow = n);\n        },\n        requires: [\n            \"popperOffsets\"\n        ],\n        requiresIfExists: [\n            \"preventOverflow\"\n        ]\n    }, jt = {\n        top: \"auto\",\n        right: \"auto\",\n        bottom: \"auto\",\n        left: \"auto\"\n    };\n    function Mt(t) {\n        var e, i = t.popper, n = t.popperRect, s = t.placement, o = t.offsets, r = t.position, a = t.gpuAcceleration, l = t.adaptive, c = t.roundOffsets, h = !0 === c ? function(t) {\n            var e = t.x, i = t.y, n = window.devicePixelRatio || 1;\n            return {\n                x: xt(xt(e * n) / n) || 0,\n                y: xt(xt(i * n) / n) || 0\n            };\n        }(o) : \"function\" == typeof c ? c(o) : o, d = h.x, u = void 0 === d ? 0 : d, f = h.y, p = void 0 === f ? 0 : f, m = o.hasOwnProperty(\"x\"), g = o.hasOwnProperty(\"y\"), _ = ot, b = it, v = window;\n        if (l) {\n            var y = Ot(i), w = \"clientHeight\", E = \"clientWidth\";\n            y === dt(i) && \"static\" !== yt(y = Et(i)).position && (w = \"scrollHeight\", E = \"scrollWidth\"), y = y, s === it && (b = nt, p -= y[w] - n.height, p *= a ? 1 : -1), s === ot && (_ = st, u -= y[E] - n.width, u *= a ? 1 : -1);\n        }\n        var A, T = Object.assign({\n            position: r\n        }, l && jt);\n        return a ? Object.assign({}, T, ((A = {})[b] = g ? \"0\" : \"\", A[_] = m ? \"0\" : \"\", A.transform = (v.devicePixelRatio || 1) < 2 ? \"translate(\" + u + \"px, \" + p + \"px)\" : \"translate3d(\" + u + \"px, \" + p + \"px, 0)\", A)) : Object.assign({}, T, ((e = {})[b] = g ? p + \"px\" : \"\", e[_] = m ? u + \"px\" : \"\", e.transform = \"\", e));\n    }\n    var Pt = {\n        name: \"computeStyles\",\n        enabled: !0,\n        phase: \"beforeWrite\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = i.gpuAcceleration, s = void 0 === n || n, o = i.adaptive, r = void 0 === o || o, a = i.roundOffsets, l = void 0 === a || a, c = {\n                placement: gt(e.placement),\n                popper: e.elements.popper,\n                popperRect: e.rects.popper,\n                gpuAcceleration: s\n            };\n            null != e.modifiersData.popperOffsets && (e.styles.popper = Object.assign({}, e.styles.popper, Mt(Object.assign({}, c, {\n                offsets: e.modifiersData.popperOffsets,\n                position: e.options.strategy,\n                adaptive: r,\n                roundOffsets: l\n            })))), null != e.modifiersData.arrow && (e.styles.arrow = Object.assign({}, e.styles.arrow, Mt(Object.assign({}, c, {\n                offsets: e.modifiersData.arrow,\n                position: \"absolute\",\n                adaptive: !1,\n                roundOffsets: l\n            })))), e.attributes.popper = Object.assign({}, e.attributes.popper, {\n                \"data-popper-placement\": e.placement\n            });\n        },\n        data: {}\n    }, Ht = {\n        passive: !0\n    }, Rt = {\n        name: \"eventListeners\",\n        enabled: !0,\n        phase: \"write\",\n        fn: function() {},\n        effect: function(t) {\n            var e = t.state, i = t.instance, n = t.options, s = n.scroll, o = void 0 === s || s, r = n.resize, a = void 0 === r || r, l = dt(e.elements.popper), c = [].concat(e.scrollParents.reference, e.scrollParents.popper);\n            return o && c.forEach(function(t) {\n                t.addEventListener(\"scroll\", i.update, Ht);\n            }), a && l.addEventListener(\"resize\", i.update, Ht), function() {\n                o && c.forEach(function(t) {\n                    t.removeEventListener(\"scroll\", i.update, Ht);\n                }), a && l.removeEventListener(\"resize\", i.update, Ht);\n            };\n        },\n        data: {}\n    }, Bt = {\n        left: \"right\",\n        right: \"left\",\n        bottom: \"top\",\n        top: \"bottom\"\n    };\n    function Wt(t) {\n        return t.replace(/left|right|bottom|top/g, function(t) {\n            return Bt[t];\n        });\n    }\n    var qt = {\n        start: \"end\",\n        end: \"start\"\n    };\n    function zt(t) {\n        return t.replace(/start|end/g, function(t) {\n            return qt[t];\n        });\n    }\n    function $t(t) {\n        var e = dt(t);\n        return {\n            scrollLeft: e.pageXOffset,\n            scrollTop: e.pageYOffset\n        };\n    }\n    function Ut(t) {\n        return _t(Et(t)).left + $t(t).scrollLeft;\n    }\n    function Ft(t) {\n        var e = yt(t), i = e.overflow, n = e.overflowX, s = e.overflowY;\n        return /auto|scroll|overlay|hidden/.test(i + s + n);\n    }\n    function Vt(t, e) {\n        var i;\n        void 0 === e && (e = []);\n        var n = function t(e) {\n            return [\n                \"html\",\n                \"body\",\n                \"#document\"\n            ].indexOf(ht(e)) >= 0 ? e.ownerDocument.body : ft(e) && Ft(e) ? e : t(At(e));\n        }(t), s = n === (null == (i = t.ownerDocument) ? void 0 : i.body), o = dt(n), r = s ? [\n            o\n        ].concat(o.visualViewport || [], Ft(n) ? n : []) : n, a = e.concat(r);\n        return s ? a : a.concat(Vt(At(r)));\n    }\n    function Kt(t) {\n        return Object.assign({}, t, {\n            left: t.x,\n            top: t.y,\n            right: t.x + t.width,\n            bottom: t.y + t.height\n        });\n    }\n    function Xt(t, e) {\n        return \"viewport\" === e ? Kt(function(t) {\n            var e = dt(t), i = Et(t), n = e.visualViewport, s = i.clientWidth, o = i.clientHeight, r = 0, a = 0;\n            return n && (s = n.width, o = n.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (r = n.offsetLeft, a = n.offsetTop)), {\n                width: s,\n                height: o,\n                x: r + Ut(t),\n                y: a\n            };\n        }(t)) : ft(e) ? function(t) {\n            var e = _t(t);\n            return e.top = e.top + t.clientTop, e.left = e.left + t.clientLeft, e.bottom = e.top + t.clientHeight, e.right = e.left + t.clientWidth, e.width = t.clientWidth, e.height = t.clientHeight, e.x = e.left, e.y = e.top, e;\n        }(e) : Kt(function(t) {\n            var e, i = Et(t), n = $t(t), s = null == (e = t.ownerDocument) ? void 0 : e.body, o = kt(i.scrollWidth, i.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0), r = kt(i.scrollHeight, i.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0), a = -n.scrollLeft + Ut(t), l = -n.scrollTop;\n            return \"rtl\" === yt(s || i).direction && (a += kt(i.clientWidth, s ? s.clientWidth : 0) - o), {\n                width: o,\n                height: r,\n                x: a,\n                y: l\n            };\n        }(Et(t)));\n    }\n    function Yt(t) {\n        return t.split(\"-\")[1];\n    }\n    function Qt(t) {\n        var e, i = t.reference, n = t.element, s = t.placement, o = s ? gt(s) : null, r = s ? Yt(s) : null, a = i.x + i.width / 2 - n.width / 2, l = i.y + i.height / 2 - n.height / 2;\n        switch(o){\n            case it:\n                e = {\n                    x: a,\n                    y: i.y - n.height\n                };\n                break;\n            case nt:\n                e = {\n                    x: a,\n                    y: i.y + i.height\n                };\n                break;\n            case st:\n                e = {\n                    x: i.x + i.width,\n                    y: l\n                };\n                break;\n            case ot:\n                e = {\n                    x: i.x - n.width,\n                    y: l\n                };\n                break;\n            default:\n                e = {\n                    x: i.x,\n                    y: i.y\n                };\n        }\n        var c = o ? Ct(o) : null;\n        if (null != c) {\n            var h = \"y\" === c ? \"height\" : \"width\";\n            switch(r){\n                case \"start\":\n                    e[c] = e[c] - (i[h] / 2 - n[h] / 2);\n                    break;\n                case \"end\":\n                    e[c] = e[c] + (i[h] / 2 - n[h] / 2);\n            }\n        }\n        return e;\n    }\n    function Gt(t, e) {\n        void 0 === e && (e = {});\n        var i = e, n = i.placement, s = void 0 === n ? t.placement : n, o = i.boundary, r = void 0 === o ? \"clippingParents\" : o, a = i.rootBoundary, l = void 0 === a ? \"viewport\" : a, c = i.elementContext, h = void 0 === c ? \"popper\" : c, d = i.altBoundary, u = void 0 !== d && d, f = i.padding, p = void 0 === f ? 0 : f, m = St(\"number\" != typeof p ? p : It(p, rt)), g = \"popper\" === h ? \"reference\" : \"popper\", _ = t.elements.reference, b = t.rects.popper, v = t.elements[u ? g : h], y = function(t, e, i) {\n            var n = \"clippingParents\" === e ? function(t) {\n                var e = Vt(At(t)), i = [\n                    \"absolute\",\n                    \"fixed\"\n                ].indexOf(yt(t).position) >= 0 && ft(t) ? Ot(t) : t;\n                return ut(i) ? e.filter(function(t) {\n                    return ut(t) && vt(t, i) && \"body\" !== ht(t);\n                }) : [];\n            }(t) : [].concat(e), s = [].concat(n, [\n                i\n            ]), o = s[0], r = s.reduce(function(e, i) {\n                var n = Xt(t, i);\n                return e.top = kt(n.top, e.top), e.right = Lt(n.right, e.right), e.bottom = Lt(n.bottom, e.bottom), e.left = kt(n.left, e.left), e;\n            }, Xt(t, o));\n            return r.width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;\n        }(ut(v) ? v : v.contextElement || Et(t.elements.popper), r, l), w = _t(_), E = Qt({\n            reference: w,\n            element: b,\n            strategy: \"absolute\",\n            placement: s\n        }), A = Kt(Object.assign({}, b, E)), T = \"popper\" === h ? A : w, O = {\n            top: y.top - T.top + m.top,\n            bottom: T.bottom - y.bottom + m.bottom,\n            left: y.left - T.left + m.left,\n            right: T.right - y.right + m.right\n        }, C = t.modifiersData.offset;\n        if (\"popper\" === h && C) {\n            var k = C[s];\n            Object.keys(O).forEach(function(t) {\n                var e = [\n                    st,\n                    nt\n                ].indexOf(t) >= 0 ? 1 : -1, i = [\n                    it,\n                    nt\n                ].indexOf(t) >= 0 ? \"y\" : \"x\";\n                O[t] += k[i] * e;\n            });\n        }\n        return O;\n    }\n    function Zt(t, e) {\n        void 0 === e && (e = {});\n        var i = e, n = i.placement, s = i.boundary, o = i.rootBoundary, r = i.padding, a = i.flipVariations, l = i.allowedAutoPlacements, c = void 0 === l ? lt : l, h = Yt(n), d = h ? a ? at : at.filter(function(t) {\n            return Yt(t) === h;\n        }) : rt, u = d.filter(function(t) {\n            return c.indexOf(t) >= 0;\n        });\n        0 === u.length && (u = d);\n        var f = u.reduce(function(e, i) {\n            return e[i] = Gt(t, {\n                placement: i,\n                boundary: s,\n                rootBoundary: o,\n                padding: r\n            })[gt(i)], e;\n        }, {});\n        return Object.keys(f).sort(function(t, e) {\n            return f[t] - f[e];\n        });\n    }\n    var Jt = {\n        name: \"flip\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name;\n            if (!e.modifiersData[n]._skip) {\n                for(var s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 === r || r, l = i.fallbackPlacements, c = i.padding, h = i.boundary, d = i.rootBoundary, u = i.altBoundary, f = i.flipVariations, p = void 0 === f || f, m = i.allowedAutoPlacements, g = e.options.placement, _ = gt(g), b = l || (_ !== g && p ? function(t) {\n                    if (\"auto\" === gt(t)) return [];\n                    var e = Wt(t);\n                    return [\n                        zt(t),\n                        e,\n                        zt(e)\n                    ];\n                }(g) : [\n                    Wt(g)\n                ]), v = [\n                    g\n                ].concat(b).reduce(function(t, i) {\n                    return t.concat(\"auto\" === gt(i) ? Zt(e, {\n                        placement: i,\n                        boundary: h,\n                        rootBoundary: d,\n                        padding: c,\n                        flipVariations: p,\n                        allowedAutoPlacements: m\n                    }) : i);\n                }, []), y = e.rects.reference, w = e.rects.popper, E = new Map, A = !0, T = v[0], O = 0; O < v.length; O++){\n                    var C = v[O], k = gt(C), L = \"start\" === Yt(C), x = [\n                        it,\n                        nt\n                    ].indexOf(k) >= 0, D = x ? \"width\" : \"height\", S = Gt(e, {\n                        placement: C,\n                        boundary: h,\n                        rootBoundary: d,\n                        altBoundary: u,\n                        padding: c\n                    }), I = x ? L ? st : ot : L ? nt : it;\n                    y[D] > w[D] && (I = Wt(I));\n                    var N = Wt(I), j = [];\n                    if (o && j.push(S[k] <= 0), a && j.push(S[I] <= 0, S[N] <= 0), j.every(function(t) {\n                        return t;\n                    })) {\n                        T = C, A = !1;\n                        break;\n                    }\n                    E.set(C, j);\n                }\n                if (A) for(var M = function(t) {\n                    var e = v.find(function(e) {\n                        var i = E.get(e);\n                        if (i) return i.slice(0, t).every(function(t) {\n                            return t;\n                        });\n                    });\n                    if (e) return T = e, \"break\";\n                }, P = p ? 3 : 1; P > 0 && \"break\" !== M(P); P--);\n                e.placement !== T && (e.modifiersData[n]._skip = !0, e.placement = T, e.reset = !0);\n            }\n        },\n        requiresIfExists: [\n            \"offset\"\n        ],\n        data: {\n            _skip: !1\n        }\n    };\n    function te(t, e, i) {\n        return void 0 === i && (i = {\n            x: 0,\n            y: 0\n        }), {\n            top: t.top - e.height - i.y,\n            right: t.right - e.width + i.x,\n            bottom: t.bottom - e.height + i.y,\n            left: t.left - e.width - i.x\n        };\n    }\n    function ee(t) {\n        return [\n            it,\n            st,\n            nt,\n            ot\n        ].some(function(e) {\n            return t[e] >= 0;\n        });\n    }\n    var ie = {\n        name: \"hide\",\n        enabled: !0,\n        phase: \"main\",\n        requiresIfExists: [\n            \"preventOverflow\"\n        ],\n        fn: function(t) {\n            var e = t.state, i = t.name, n = e.rects.reference, s = e.rects.popper, o = e.modifiersData.preventOverflow, r = Gt(e, {\n                elementContext: \"reference\"\n            }), a = Gt(e, {\n                altBoundary: !0\n            }), l = te(r, n), c = te(a, s, o), h = ee(l), d = ee(c);\n            e.modifiersData[i] = {\n                referenceClippingOffsets: l,\n                popperEscapeOffsets: c,\n                isReferenceHidden: h,\n                hasPopperEscaped: d\n            }, e.attributes.popper = Object.assign({}, e.attributes.popper, {\n                \"data-popper-reference-hidden\": h,\n                \"data-popper-escaped\": d\n            });\n        }\n    }, ne = {\n        name: \"offset\",\n        enabled: !0,\n        phase: \"main\",\n        requires: [\n            \"popperOffsets\"\n        ],\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name, s = i.offset, o = void 0 === s ? [\n                0,\n                0\n            ] : s, r = lt.reduce(function(t, i) {\n                return t[i] = function(t, e, i) {\n                    var n = gt(t), s = [\n                        ot,\n                        it\n                    ].indexOf(n) >= 0 ? -1 : 1, o = \"function\" == typeof i ? i(Object.assign({}, e, {\n                        placement: t\n                    })) : i, r = o[0], a = o[1];\n                    return r = r || 0, a = (a || 0) * s, [\n                        ot,\n                        st\n                    ].indexOf(n) >= 0 ? {\n                        x: a,\n                        y: r\n                    } : {\n                        x: r,\n                        y: a\n                    };\n                }(i, e.rects, o), t;\n            }, {}), a = r[e.placement], l = a.x, c = a.y;\n            null != e.modifiersData.popperOffsets && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c), e.modifiersData[n] = r;\n        }\n    }, se = {\n        name: \"popperOffsets\",\n        enabled: !0,\n        phase: \"read\",\n        fn: function(t) {\n            var e = t.state, i = t.name;\n            e.modifiersData[i] = Qt({\n                reference: e.rects.reference,\n                element: e.rects.popper,\n                strategy: \"absolute\",\n                placement: e.placement\n            });\n        },\n        data: {}\n    }, oe = {\n        name: \"preventOverflow\",\n        enabled: !0,\n        phase: \"main\",\n        fn: function(t) {\n            var e = t.state, i = t.options, n = t.name, s = i.mainAxis, o = void 0 === s || s, r = i.altAxis, a = void 0 !== r && r, l = i.boundary, c = i.rootBoundary, h = i.altBoundary, d = i.padding, u = i.tether, f = void 0 === u || u, p = i.tetherOffset, m = void 0 === p ? 0 : p, g = Gt(e, {\n                boundary: l,\n                rootBoundary: c,\n                padding: d,\n                altBoundary: h\n            }), _ = gt(e.placement), b = Yt(e.placement), v = !b, y = Ct(_), w = \"x\" === y ? \"y\" : \"x\", E = e.modifiersData.popperOffsets, A = e.rects.reference, T = e.rects.popper, O = \"function\" == typeof m ? m(Object.assign({}, e.rects, {\n                placement: e.placement\n            })) : m, C = {\n                x: 0,\n                y: 0\n            };\n            if (E) {\n                if (o || a) {\n                    var k = \"y\" === y ? it : ot, L = \"y\" === y ? nt : st, x = \"y\" === y ? \"height\" : \"width\", D = E[y], S = E[y] + g[k], I = E[y] - g[L], N = f ? -T[x] / 2 : 0, j = \"start\" === b ? A[x] : T[x], M = \"start\" === b ? -T[x] : -A[x], P = e.elements.arrow, H = f && P ? bt(P) : {\n                        width: 0,\n                        height: 0\n                    }, R = e.modifiersData[\"arrow#persistent\"] ? e.modifiersData[\"arrow#persistent\"].padding : {\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0\n                    }, B = R[k], W = R[L], q = Dt(0, A[x], H[x]), z = v ? A[x] / 2 - N - q - B - O : j - q - B - O, $ = v ? -A[x] / 2 + N + q + W + O : M + q + W + O, U = e.elements.arrow && Ot(e.elements.arrow), F = U ? \"y\" === y ? U.clientTop || 0 : U.clientLeft || 0 : 0, V = e.modifiersData.offset ? e.modifiersData.offset[e.placement][y] : 0, K = E[y] + z - V - F, X = E[y] + $ - V;\n                    if (o) {\n                        var Y = Dt(f ? Lt(S, K) : S, D, f ? kt(I, X) : I);\n                        E[y] = Y, C[y] = Y - D;\n                    }\n                    if (a) {\n                        var Q = \"x\" === y ? it : ot, G = \"x\" === y ? nt : st, Z = E[w], J = Z + g[Q], tt = Z - g[G], et = Dt(f ? Lt(J, K) : J, Z, f ? kt(tt, X) : tt);\n                        E[w] = et, C[w] = et - Z;\n                    }\n                }\n                e.modifiersData[n] = C;\n            }\n        },\n        requiresIfExists: [\n            \"offset\"\n        ]\n    };\n    function re(t, e, i) {\n        void 0 === i && (i = !1);\n        var n, s, o = Et(e), r = _t(t), a = ft(e), l = {\n            scrollLeft: 0,\n            scrollTop: 0\n        }, c = {\n            x: 0,\n            y: 0\n        };\n        return (a || !a && !i) && ((\"body\" !== ht(e) || Ft(o)) && (l = (n = e) !== dt(n) && ft(n) ? {\n            scrollLeft: (s = n).scrollLeft,\n            scrollTop: s.scrollTop\n        } : $t(n)), ft(e) ? ((c = _t(e)).x += e.clientLeft, c.y += e.clientTop) : o && (c.x = Ut(o))), {\n            x: r.left + l.scrollLeft - c.x,\n            y: r.top + l.scrollTop - c.y,\n            width: r.width,\n            height: r.height\n        };\n    }\n    var ae = {\n        placement: \"bottom\",\n        modifiers: [],\n        strategy: \"absolute\"\n    };\n    function le() {\n        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];\n        return !e.some(function(t) {\n            return !(t && \"function\" == typeof t.getBoundingClientRect);\n        });\n    }\n    function ce(t) {\n        void 0 === t && (t = {});\n        var e = t, i = e.defaultModifiers, n = void 0 === i ? [] : i, s = e.defaultOptions, o = void 0 === s ? ae : s;\n        return function(t, e, i) {\n            void 0 === i && (i = o);\n            var s, r, a = {\n                placement: \"bottom\",\n                orderedModifiers: [],\n                options: Object.assign({}, ae, o),\n                modifiersData: {},\n                elements: {\n                    reference: t,\n                    popper: e\n                },\n                attributes: {},\n                styles: {}\n            }, l = [], c = !1, h = {\n                state: a,\n                setOptions: function(i) {\n                    d(), a.options = Object.assign({}, o, a.options, i), a.scrollParents = {\n                        reference: ut(t) ? Vt(t) : t.contextElement ? Vt(t.contextElement) : [],\n                        popper: Vt(e)\n                    };\n                    var s, r, c = function(t) {\n                        var e = function(t) {\n                            var e = new Map, i = new Set, n = [];\n                            return t.forEach(function(t) {\n                                e.set(t.name, t);\n                            }), t.forEach(function(t) {\n                                i.has(t.name) || function t(s) {\n                                    i.add(s.name), [].concat(s.requires || [], s.requiresIfExists || []).forEach(function(n) {\n                                        if (!i.has(n)) {\n                                            var s = e.get(n);\n                                            s && t(s);\n                                        }\n                                    }), n.push(s);\n                                }(t);\n                            }), n;\n                        }(t);\n                        return ct.reduce(function(t, i) {\n                            return t.concat(e.filter(function(t) {\n                                return t.phase === i;\n                            }));\n                        }, []);\n                    }((s = [].concat(n, a.options.modifiers), r = s.reduce(function(t, e) {\n                        var i = t[e.name];\n                        return t[e.name] = i ? Object.assign({}, i, e, {\n                            options: Object.assign({}, i.options, e.options),\n                            data: Object.assign({}, i.data, e.data)\n                        }) : e, t;\n                    }, {}), Object.keys(r).map(function(t) {\n                        return r[t];\n                    })));\n                    return a.orderedModifiers = c.filter(function(t) {\n                        return t.enabled;\n                    }), a.orderedModifiers.forEach(function(t) {\n                        var e = t.name, i = t.options, n = void 0 === i ? {} : i, s = t.effect;\n                        if (\"function\" == typeof s) {\n                            var o = s({\n                                state: a,\n                                name: e,\n                                instance: h,\n                                options: n\n                            });\n                            l.push(o || function() {});\n                        }\n                    }), h.update();\n                },\n                forceUpdate: function() {\n                    if (!c) {\n                        var t = a.elements, e = t.reference, i = t.popper;\n                        if (le(e, i)) {\n                            a.rects = {\n                                reference: re(e, Ot(i), \"fixed\" === a.options.strategy),\n                                popper: bt(i)\n                            }, a.reset = !1, a.placement = a.options.placement, a.orderedModifiers.forEach(function(t) {\n                                return a.modifiersData[t.name] = Object.assign({}, t.data);\n                            });\n                            for(var n = 0; n < a.orderedModifiers.length; n++)if (!0 !== a.reset) {\n                                var s = a.orderedModifiers[n], o = s.fn, r = s.options, l = void 0 === r ? {} : r, d = s.name;\n                                \"function\" == typeof o && (a = o({\n                                    state: a,\n                                    options: l,\n                                    name: d,\n                                    instance: h\n                                }) || a);\n                            } else a.reset = !1, n = -1;\n                        }\n                    }\n                },\n                update: (s = function() {\n                    return new Promise(function(t) {\n                        h.forceUpdate(), t(a);\n                    });\n                }, function() {\n                    return r || (r = new Promise(function(t) {\n                        Promise.resolve().then(function() {\n                            r = void 0, t(s());\n                        });\n                    })), r;\n                }),\n                destroy: function() {\n                    d(), c = !0;\n                }\n            };\n            if (!le(t, e)) return h;\n            function d() {\n                l.forEach(function(t) {\n                    return t();\n                }), l = [];\n            }\n            return h.setOptions(i).then(function(t) {\n                !c && i.onFirstUpdate && i.onFirstUpdate(t);\n            }), h;\n        };\n    }\n    var he = ce(), de = ce({\n        defaultModifiers: [\n            Rt,\n            se,\n            Pt,\n            mt\n        ]\n    }), ue = ce({\n        defaultModifiers: [\n            Rt,\n            se,\n            Pt,\n            mt,\n            ne,\n            Jt,\n            oe,\n            Nt,\n            ie\n        ]\n    }), fe = Object.freeze({\n        __proto__: null,\n        popperGenerator: ce,\n        detectOverflow: Gt,\n        createPopperBase: he,\n        createPopper: ue,\n        createPopperLite: de,\n        top: it,\n        bottom: nt,\n        right: st,\n        left: ot,\n        auto: \"auto\",\n        basePlacements: rt,\n        start: \"start\",\n        end: \"end\",\n        clippingParents: \"clippingParents\",\n        viewport: \"viewport\",\n        popper: \"popper\",\n        reference: \"reference\",\n        variationPlacements: at,\n        placements: lt,\n        beforeRead: \"beforeRead\",\n        read: \"read\",\n        afterRead: \"afterRead\",\n        beforeMain: \"beforeMain\",\n        main: \"main\",\n        afterMain: \"afterMain\",\n        beforeWrite: \"beforeWrite\",\n        write: \"write\",\n        afterWrite: \"afterWrite\",\n        modifierPhases: ct,\n        applyStyles: mt,\n        arrow: Nt,\n        computeStyles: Pt,\n        eventListeners: Rt,\n        flip: Jt,\n        hide: ie,\n        offset: ne,\n        popperOffsets: se,\n        preventOverflow: oe\n    });\n    const pe = new RegExp(\"ArrowUp|ArrowDown|Escape\"), me = g() ? \"top-end\" : \"top-start\", ge = g() ? \"top-start\" : \"top-end\", _e = g() ? \"bottom-end\" : \"bottom-start\", be = g() ? \"bottom-start\" : \"bottom-end\", ve = g() ? \"left-start\" : \"right-start\", ye = g() ? \"right-start\" : \"left-start\", we = {\n        offset: [\n            0,\n            2\n        ],\n        boundary: \"clippingParents\",\n        reference: \"toggle\",\n        display: \"dynamic\",\n        popperConfig: null,\n        autoClose: !0\n    }, Ee = {\n        offset: \"(array|string|function)\",\n        boundary: \"(string|element)\",\n        reference: \"(string|element|object)\",\n        display: \"string\",\n        popperConfig: \"(null|object|function)\",\n        autoClose: \"(boolean|string)\"\n    };\n    class Ae extends B {\n        static get Default() {\n            return we;\n        }\n        static get DefaultType() {\n            return Ee;\n        }\n        static get NAME() {\n            return \"dropdown\";\n        }\n        toggle() {\n            h(this._element) || (this._element.classList.contains(\"show\") ? this.hide() : this.show());\n        }\n        show() {\n            if (h(this._element) || this._menu.classList.contains(\"show\")) return;\n            const t = Ae.getParentFromElement(this._element), e = {\n                relatedTarget: this._element\n            };\n            if (!P.trigger(this._element, \"show.bs.dropdown\", e).defaultPrevented) {\n                if (this._inNavbar) U.setDataAttribute(this._menu, \"popper\", \"none\");\n                else {\n                    if (void 0 === fe) throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n                    let e = this._element;\n                    \"parent\" === this._config.reference ? e = t : r(this._config.reference) ? e = a(this._config.reference) : \"object\" == typeof this._config.reference && (e = this._config.reference);\n                    const i = this._getPopperConfig(), n = i.modifiers.find((t)=>\"applyStyles\" === t.name && !1 === t.enabled);\n                    this._popper = ue(e, this._menu, i), n && U.setDataAttribute(this._menu, \"popper\", \"static\");\n                }\n                \"ontouchstart\" in document.documentElement && !t.closest(\".navbar-nav\") && [].concat(...document.body.children).forEach((t)=>P.on(t, \"mouseover\", u)), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.classList.toggle(\"show\"), this._element.classList.toggle(\"show\"), P.trigger(this._element, \"shown.bs.dropdown\", e);\n            }\n        }\n        hide() {\n            if (h(this._element) || !this._menu.classList.contains(\"show\")) return;\n            const t = {\n                relatedTarget: this._element\n            };\n            this._completeHide(t);\n        }\n        dispose() {\n            this._popper && this._popper.destroy(), super.dispose();\n        }\n        update() {\n            this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n        }\n        _addEventListeners() {\n            P.on(this._element, \"click.bs.dropdown\", (t)=>{\n                t.preventDefault(), this.toggle();\n            });\n        }\n        _completeHide(t) {\n            P.trigger(this._element, \"hide.bs.dropdown\", t).defaultPrevented || (\"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((t)=>P.off(t, \"mouseover\", u)), this._popper && this._popper.destroy(), this._menu.classList.remove(\"show\"), this._element.classList.remove(\"show\"), this._element.setAttribute(\"aria-expanded\", \"false\"), U.removeDataAttribute(this._menu, \"popper\"), P.trigger(this._element, \"hidden.bs.dropdown\", t));\n        }\n        _getConfig(t) {\n            if (t = {\n                ...this.constructor.Default,\n                ...U.getDataAttributes(this._element),\n                ...t\n            }, l(\"dropdown\", t, this.constructor.DefaultType), \"object\" == typeof t.reference && !r(t.reference) && \"function\" != typeof t.reference.getBoundingClientRect) throw new TypeError(\"dropdown\".toUpperCase() + ': Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.');\n            return t;\n        }\n        _getMenuElement() {\n            return t.next(this._element, \".dropdown-menu\")[0];\n        }\n        _getPlacement() {\n            const t = this._element.parentNode;\n            if (t.classList.contains(\"dropend\")) return ve;\n            if (t.classList.contains(\"dropstart\")) return ye;\n            const e = \"end\" === getComputedStyle(this._menu).getPropertyValue(\"--bs-position\").trim();\n            return t.classList.contains(\"dropup\") ? e ? ge : me : e ? be : _e;\n        }\n        _detectNavbar() {\n            return null !== this._element.closest(\".navbar\");\n        }\n        _getOffset() {\n            const { offset: t } = this._config;\n            return \"string\" == typeof t ? t.split(\",\").map((t)=>Number.parseInt(t, 10)) : \"function\" == typeof t ? (e)=>t(e, this._element) : t;\n        }\n        _getPopperConfig() {\n            const t = {\n                placement: this._getPlacement(),\n                modifiers: [\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    }\n                ]\n            };\n            return \"static\" === this._config.display && (t.modifiers = [\n                {\n                    name: \"applyStyles\",\n                    enabled: !1\n                }\n            ]), {\n                ...t,\n                ...\"function\" == typeof this._config.popperConfig ? this._config.popperConfig(t) : this._config.popperConfig\n            };\n        }\n        _selectMenuItem(param) {\n            let { key: e, target: i } = param;\n            const n = t.find(\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\", this._menu).filter(c);\n            n.length && y(n, i, \"ArrowDown\" === e, !n.includes(i)).focus();\n        }\n        static dropdownInterface(t, e) {\n            const i = Ae.getOrCreateInstance(t, e);\n            if (\"string\" == typeof e) {\n                if (void 0 === i[e]) throw new TypeError('No method named \"'.concat(e, '\"'));\n                i[e]();\n            }\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                Ae.dropdownInterface(this, t);\n            });\n        }\n        static clearMenus(e) {\n            if (e && (2 === e.button || \"keyup\" === e.type && \"Tab\" !== e.key)) return;\n            const i = t.find('[data-bs-toggle=\"dropdown\"]');\n            for(let t = 0, n = i.length; t < n; t++){\n                const n = Ae.getInstance(i[t]);\n                if (!n || !1 === n._config.autoClose) continue;\n                if (!n._element.classList.contains(\"show\")) continue;\n                const s = {\n                    relatedTarget: n._element\n                };\n                if (e) {\n                    const t = e.composedPath(), i = t.includes(n._menu);\n                    if (t.includes(n._element) || \"inside\" === n._config.autoClose && !i || \"outside\" === n._config.autoClose && i) continue;\n                    if (n._menu.contains(e.target) && (\"keyup\" === e.type && \"Tab\" === e.key || /input|select|option|textarea|form/i.test(e.target.tagName))) continue;\n                    \"click\" === e.type && (s.clickEvent = e);\n                }\n                n._completeHide(s);\n            }\n        }\n        static getParentFromElement(t) {\n            return s(t) || t.parentNode;\n        }\n        static dataApiKeydownHandler(e) {\n            if (/input|textarea/i.test(e.target.tagName) ? \"Space\" === e.key || \"Escape\" !== e.key && (\"ArrowDown\" !== e.key && \"ArrowUp\" !== e.key || e.target.closest(\".dropdown-menu\")) : !pe.test(e.key)) return;\n            const i = this.classList.contains(\"show\");\n            if (!i && \"Escape\" === e.key) return;\n            if (e.preventDefault(), e.stopPropagation(), h(this)) return;\n            const n = ()=>this.matches('[data-bs-toggle=\"dropdown\"]') ? this : t.prev(this, '[data-bs-toggle=\"dropdown\"]')[0];\n            return \"Escape\" === e.key ? (n().focus(), void Ae.clearMenus()) : \"ArrowUp\" === e.key || \"ArrowDown\" === e.key ? (i || n().click(), void Ae.getInstance(n())._selectMenuItem(e)) : void (i && \"Space\" !== e.key || Ae.clearMenus());\n        }\n        constructor(t, e){\n            super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();\n        }\n    }\n    P.on(document, \"keydown.bs.dropdown.data-api\", '[data-bs-toggle=\"dropdown\"]', Ae.dataApiKeydownHandler), P.on(document, \"keydown.bs.dropdown.data-api\", \".dropdown-menu\", Ae.dataApiKeydownHandler), P.on(document, \"click.bs.dropdown.data-api\", Ae.clearMenus), P.on(document, \"keyup.bs.dropdown.data-api\", Ae.clearMenus), P.on(document, \"click.bs.dropdown.data-api\", '[data-bs-toggle=\"dropdown\"]', function(t) {\n        t.preventDefault(), Ae.dropdownInterface(this);\n    }), _(Ae);\n    class Te {\n        getWidth() {\n            const t = document.documentElement.clientWidth;\n            return Math.abs(window.innerWidth - t);\n        }\n        hide() {\n            const t = this.getWidth();\n            this._disableOverFlow(), this._setElementAttributes(this._element, \"paddingRight\", (e)=>e + t), this._setElementAttributes(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", \"paddingRight\", (e)=>e + t), this._setElementAttributes(\".sticky-top\", \"marginRight\", (e)=>e - t);\n        }\n        _disableOverFlow() {\n            this._saveInitialAttribute(this._element, \"overflow\"), this._element.style.overflow = \"hidden\";\n        }\n        _setElementAttributes(t, e, i) {\n            const n = this.getWidth();\n            this._applyManipulationCallback(t, (t)=>{\n                if (t !== this._element && window.innerWidth > t.clientWidth + n) return;\n                this._saveInitialAttribute(t, e);\n                const s = window.getComputedStyle(t)[e];\n                t.style[e] = i(Number.parseFloat(s)) + \"px\";\n            });\n        }\n        reset() {\n            this._resetElementAttributes(this._element, \"overflow\"), this._resetElementAttributes(this._element, \"paddingRight\"), this._resetElementAttributes(\".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", \"paddingRight\"), this._resetElementAttributes(\".sticky-top\", \"marginRight\");\n        }\n        _saveInitialAttribute(t, e) {\n            const i = t.style[e];\n            i && U.setDataAttribute(t, e, i);\n        }\n        _resetElementAttributes(t, e) {\n            this._applyManipulationCallback(t, (t)=>{\n                const i = U.getDataAttribute(t, e);\n                void 0 === i ? t.style.removeProperty(e) : (U.removeDataAttribute(t, e), t.style[e] = i);\n            });\n        }\n        _applyManipulationCallback(e, i) {\n            r(e) ? i(e) : t.find(e, this._element).forEach(i);\n        }\n        isOverflowing() {\n            return this.getWidth() > 0;\n        }\n        constructor(){\n            this._element = document.body;\n        }\n    }\n    const Oe = {\n        isVisible: !0,\n        isAnimated: !1,\n        rootElement: \"body\",\n        clickCallback: null\n    }, Ce = {\n        isVisible: \"boolean\",\n        isAnimated: \"boolean\",\n        rootElement: \"(element|string)\",\n        clickCallback: \"(function|null)\"\n    };\n    class ke {\n        show(t) {\n            this._config.isVisible ? (this._append(), this._config.isAnimated && f(this._getElement()), this._getElement().classList.add(\"show\"), this._emulateAnimation(()=>{\n                b(t);\n            })) : b(t);\n        }\n        hide(t) {\n            this._config.isVisible ? (this._getElement().classList.remove(\"show\"), this._emulateAnimation(()=>{\n                this.dispose(), b(t);\n            })) : b(t);\n        }\n        _getElement() {\n            if (!this._element) {\n                const t = document.createElement(\"div\");\n                t.className = \"modal-backdrop\", this._config.isAnimated && t.classList.add(\"fade\"), this._element = t;\n            }\n            return this._element;\n        }\n        _getConfig(t) {\n            return (t = {\n                ...Oe,\n                ...\"object\" == typeof t ? t : {}\n            }).rootElement = a(t.rootElement), l(\"backdrop\", t, Ce), t;\n        }\n        _append() {\n            this._isAppended || (this._config.rootElement.appendChild(this._getElement()), P.on(this._getElement(), \"mousedown.bs.backdrop\", ()=>{\n                b(this._config.clickCallback);\n            }), this._isAppended = !0);\n        }\n        dispose() {\n            this._isAppended && (P.off(this._element, \"mousedown.bs.backdrop\"), this._element.remove(), this._isAppended = !1);\n        }\n        _emulateAnimation(t) {\n            v(t, this._getElement(), this._config.isAnimated);\n        }\n        constructor(t){\n            this._config = this._getConfig(t), this._isAppended = !1, this._element = null;\n        }\n    }\n    const Le = {\n        backdrop: !0,\n        keyboard: !0,\n        focus: !0\n    }, xe = {\n        backdrop: \"(boolean|string)\",\n        keyboard: \"boolean\",\n        focus: \"boolean\"\n    };\n    class De extends B {\n        static get Default() {\n            return Le;\n        }\n        static get NAME() {\n            return \"modal\";\n        }\n        toggle(t) {\n            return this._isShown ? this.hide() : this.show(t);\n        }\n        show(t) {\n            this._isShown || this._isTransitioning || P.trigger(this._element, \"show.bs.modal\", {\n                relatedTarget: t\n            }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.classList.add(\"modal-open\"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), P.on(this._element, \"click.dismiss.bs.modal\", '[data-bs-dismiss=\"modal\"]', (t)=>this.hide(t)), P.on(this._dialog, \"mousedown.dismiss.bs.modal\", ()=>{\n                P.one(this._element, \"mouseup.dismiss.bs.modal\", (t)=>{\n                    t.target === this._element && (this._ignoreBackdropClick = !0);\n                });\n            }), this._showBackdrop(()=>this._showElement(t)));\n        }\n        hide(t) {\n            if (t && [\n                \"A\",\n                \"AREA\"\n            ].includes(t.target.tagName) && t.preventDefault(), !this._isShown || this._isTransitioning) return;\n            if (P.trigger(this._element, \"hide.bs.modal\").defaultPrevented) return;\n            this._isShown = !1;\n            const e = this._isAnimated();\n            e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), P.off(document, \"focusin.bs.modal\"), this._element.classList.remove(\"show\"), P.off(this._element, \"click.dismiss.bs.modal\"), P.off(this._dialog, \"mousedown.dismiss.bs.modal\"), this._queueCallback(()=>this._hideModal(), this._element, e);\n        }\n        dispose() {\n            [\n                window,\n                this._dialog\n            ].forEach((t)=>P.off(t, \".bs.modal\")), this._backdrop.dispose(), super.dispose(), P.off(document, \"focusin.bs.modal\");\n        }\n        handleUpdate() {\n            this._adjustDialog();\n        }\n        _initializeBackDrop() {\n            return new ke({\n                isVisible: Boolean(this._config.backdrop),\n                isAnimated: this._isAnimated()\n            });\n        }\n        _getConfig(t) {\n            return t = {\n                ...Le,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t ? t : {}\n            }, l(\"modal\", t, xe), t;\n        }\n        _showElement(e) {\n            const i = this._isAnimated(), n = t.findOne(\".modal-body\", this._dialog);\n            this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.scrollTop = 0, n && (n.scrollTop = 0), i && f(this._element), this._element.classList.add(\"show\"), this._config.focus && this._enforceFocus(), this._queueCallback(()=>{\n                this._config.focus && this._element.focus(), this._isTransitioning = !1, P.trigger(this._element, \"shown.bs.modal\", {\n                    relatedTarget: e\n                });\n            }, this._dialog, i);\n        }\n        _enforceFocus() {\n            P.off(document, \"focusin.bs.modal\"), P.on(document, \"focusin.bs.modal\", (t)=>{\n                document === t.target || this._element === t.target || this._element.contains(t.target) || this._element.focus();\n            });\n        }\n        _setEscapeEvent() {\n            this._isShown ? P.on(this._element, \"keydown.dismiss.bs.modal\", (t)=>{\n                this._config.keyboard && \"Escape\" === t.key ? (t.preventDefault(), this.hide()) : this._config.keyboard || \"Escape\" !== t.key || this._triggerBackdropTransition();\n            }) : P.off(this._element, \"keydown.dismiss.bs.modal\");\n        }\n        _setResizeEvent() {\n            this._isShown ? P.on(window, \"resize.bs.modal\", ()=>this._adjustDialog()) : P.off(window, \"resize.bs.modal\");\n        }\n        _hideModal() {\n            this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._backdrop.hide(()=>{\n                document.body.classList.remove(\"modal-open\"), this._resetAdjustments(), this._scrollBar.reset(), P.trigger(this._element, \"hidden.bs.modal\");\n            });\n        }\n        _showBackdrop(t) {\n            P.on(this._element, \"click.dismiss.bs.modal\", (t)=>{\n                this._ignoreBackdropClick ? this._ignoreBackdropClick = !1 : t.target === t.currentTarget && (!0 === this._config.backdrop ? this.hide() : \"static\" === this._config.backdrop && this._triggerBackdropTransition());\n            }), this._backdrop.show(t);\n        }\n        _isAnimated() {\n            return this._element.classList.contains(\"fade\");\n        }\n        _triggerBackdropTransition() {\n            if (P.trigger(this._element, \"hidePrevented.bs.modal\").defaultPrevented) return;\n            const { classList: t, scrollHeight: e, style: i } = this._element, n = e > document.documentElement.clientHeight;\n            !n && \"hidden\" === i.overflowY || t.contains(\"modal-static\") || (n || (i.overflowY = \"hidden\"), t.add(\"modal-static\"), this._queueCallback(()=>{\n                t.remove(\"modal-static\"), n || this._queueCallback(()=>{\n                    i.overflowY = \"\";\n                }, this._dialog);\n            }, this._dialog), this._element.focus());\n        }\n        _adjustDialog() {\n            const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), i = e > 0;\n            (!i && t && !g() || i && !t && g()) && (this._element.style.paddingLeft = e + \"px\"), (i && !t && !g() || !i && t && g()) && (this._element.style.paddingRight = e + \"px\");\n        }\n        _resetAdjustments() {\n            this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n        }\n        static jQueryInterface(t, e) {\n            return this.each(function() {\n                const i = De.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === i[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    i[t](e);\n                }\n            });\n        }\n        constructor(e, i){\n            super(e), this._config = this._getConfig(i), this._dialog = t.findOne(\".modal-dialog\", this._element), this._backdrop = this._initializeBackDrop(), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollBar = new Te;\n        }\n    }\n    P.on(document, \"click.bs.modal.data-api\", '[data-bs-toggle=\"modal\"]', function(t) {\n        const e = s(this);\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && t.preventDefault(), P.one(e, \"show.bs.modal\", (t)=>{\n            t.defaultPrevented || P.one(e, \"hidden.bs.modal\", ()=>{\n                c(this) && this.focus();\n            });\n        }), De.getOrCreateInstance(e).toggle(this);\n    }), _(De);\n    const Se = {\n        backdrop: !0,\n        keyboard: !0,\n        scroll: !1\n    }, Ie = {\n        backdrop: \"boolean\",\n        keyboard: \"boolean\",\n        scroll: \"boolean\"\n    };\n    class Ne extends B {\n        static get NAME() {\n            return \"offcanvas\";\n        }\n        static get Default() {\n            return Se;\n        }\n        toggle(t) {\n            return this._isShown ? this.hide() : this.show(t);\n        }\n        show(t) {\n            this._isShown || P.trigger(this._element, \"show.bs.offcanvas\", {\n                relatedTarget: t\n            }).defaultPrevented || (this._isShown = !0, this._element.style.visibility = \"visible\", this._backdrop.show(), this._config.scroll || ((new Te).hide(), this._enforceFocusOnElement(this._element)), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.classList.add(\"show\"), this._queueCallback(()=>{\n                P.trigger(this._element, \"shown.bs.offcanvas\", {\n                    relatedTarget: t\n                });\n            }, this._element, !0));\n        }\n        hide() {\n            this._isShown && (P.trigger(this._element, \"hide.bs.offcanvas\").defaultPrevented || (P.off(document, \"focusin.bs.offcanvas\"), this._element.blur(), this._isShown = !1, this._element.classList.remove(\"show\"), this._backdrop.hide(), this._queueCallback(()=>{\n                this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._element.style.visibility = \"hidden\", this._config.scroll || (new Te).reset(), P.trigger(this._element, \"hidden.bs.offcanvas\");\n            }, this._element, !0)));\n        }\n        dispose() {\n            this._backdrop.dispose(), super.dispose(), P.off(document, \"focusin.bs.offcanvas\");\n        }\n        _getConfig(t) {\n            return t = {\n                ...Se,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t ? t : {}\n            }, l(\"offcanvas\", t, Ie), t;\n        }\n        _initializeBackDrop() {\n            return new ke({\n                isVisible: this._config.backdrop,\n                isAnimated: !0,\n                rootElement: this._element.parentNode,\n                clickCallback: ()=>this.hide()\n            });\n        }\n        _enforceFocusOnElement(t) {\n            P.off(document, \"focusin.bs.offcanvas\"), P.on(document, \"focusin.bs.offcanvas\", (e)=>{\n                document === e.target || t === e.target || t.contains(e.target) || t.focus();\n            }), t.focus();\n        }\n        _addEventListeners() {\n            P.on(this._element, \"click.dismiss.bs.offcanvas\", '[data-bs-dismiss=\"offcanvas\"]', ()=>this.hide()), P.on(this._element, \"keydown.dismiss.bs.offcanvas\", (t)=>{\n                this._config.keyboard && \"Escape\" === t.key && this.hide();\n            });\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Ne.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t](this);\n                }\n            });\n        }\n        constructor(t, e){\n            super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._addEventListeners();\n        }\n    }\n    P.on(document, \"click.bs.offcanvas.data-api\", '[data-bs-toggle=\"offcanvas\"]', function(e) {\n        const i = s(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), h(this)) return;\n        P.one(i, \"hidden.bs.offcanvas\", ()=>{\n            c(this) && this.focus();\n        });\n        const n = t.findOne(\".offcanvas.show\");\n        n && n !== i && Ne.getInstance(n).hide(), Ne.getOrCreateInstance(i).toggle(this);\n    }), P.on(window, \"load.bs.offcanvas.data-api\", ()=>t.find(\".offcanvas.show\").forEach((t)=>Ne.getOrCreateInstance(t).show())), _(Ne);\n    const je = new Set([\n        \"background\",\n        \"cite\",\n        \"href\",\n        \"itemtype\",\n        \"longdesc\",\n        \"poster\",\n        \"src\",\n        \"xlink:href\"\n    ]), Me = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i, Pe = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i, He = (t, e)=>{\n        const i = t.nodeName.toLowerCase();\n        if (e.includes(i)) return !je.has(i) || Boolean(Me.test(t.nodeValue) || Pe.test(t.nodeValue));\n        const n = e.filter((t)=>t instanceof RegExp);\n        for(let t = 0, e = n.length; t < e; t++)if (n[t].test(i)) return !0;\n        return !1;\n    };\n    function Re(t, e, i) {\n        if (!t.length) return t;\n        if (i && \"function\" == typeof i) return i(t);\n        const n = (new window.DOMParser).parseFromString(t, \"text/html\"), s = Object.keys(e), o = [].concat(...n.body.querySelectorAll(\"*\"));\n        for(let t = 0, i = o.length; t < i; t++){\n            const i = o[t], n = i.nodeName.toLowerCase();\n            if (!s.includes(n)) {\n                i.remove();\n                continue;\n            }\n            const r = [].concat(...i.attributes), a = [].concat(e[\"*\"] || [], e[n] || []);\n            r.forEach((t)=>{\n                He(t, a) || i.removeAttribute(t.nodeName);\n            });\n        }\n        return n.body.innerHTML;\n    }\n    const Be = new RegExp(\"(^|\\\\s)bs-tooltip\\\\S+\", \"g\"), We = new Set([\n        \"sanitize\",\n        \"allowList\",\n        \"sanitizeFn\"\n    ]), qe = {\n        animation: \"boolean\",\n        template: \"string\",\n        title: \"(string|element|function)\",\n        trigger: \"string\",\n        delay: \"(number|object)\",\n        html: \"boolean\",\n        selector: \"(string|boolean)\",\n        placement: \"(string|function)\",\n        offset: \"(array|string|function)\",\n        container: \"(string|element|boolean)\",\n        fallbackPlacements: \"array\",\n        boundary: \"(string|element)\",\n        customClass: \"(string|function)\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        allowList: \"object\",\n        popperConfig: \"(null|object|function)\"\n    }, ze = {\n        AUTO: \"auto\",\n        TOP: \"top\",\n        RIGHT: g() ? \"left\" : \"right\",\n        BOTTOM: \"bottom\",\n        LEFT: g() ? \"right\" : \"left\"\n    }, $e = {\n        animation: !0,\n        template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n        trigger: \"hover focus\",\n        title: \"\",\n        delay: 0,\n        html: !1,\n        selector: !1,\n        placement: \"top\",\n        offset: [\n            0,\n            0\n        ],\n        container: !1,\n        fallbackPlacements: [\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ],\n        boundary: \"clippingParents\",\n        customClass: \"\",\n        sanitize: !0,\n        sanitizeFn: null,\n        allowList: {\n            \"*\": [\n                \"class\",\n                \"dir\",\n                \"id\",\n                \"lang\",\n                \"role\",\n                /^aria-[\\w-]*$/i\n            ],\n            a: [\n                \"target\",\n                \"href\",\n                \"title\",\n                \"rel\"\n            ],\n            area: [],\n            b: [],\n            br: [],\n            col: [],\n            code: [],\n            div: [],\n            em: [],\n            hr: [],\n            h1: [],\n            h2: [],\n            h3: [],\n            h4: [],\n            h5: [],\n            h6: [],\n            i: [],\n            img: [\n                \"src\",\n                \"srcset\",\n                \"alt\",\n                \"title\",\n                \"width\",\n                \"height\"\n            ],\n            li: [],\n            ol: [],\n            p: [],\n            pre: [],\n            s: [],\n            small: [],\n            span: [],\n            sub: [],\n            sup: [],\n            strong: [],\n            u: [],\n            ul: []\n        },\n        popperConfig: null\n    }, Ue = {\n        HIDE: \"hide.bs.tooltip\",\n        HIDDEN: \"hidden.bs.tooltip\",\n        SHOW: \"show.bs.tooltip\",\n        SHOWN: \"shown.bs.tooltip\",\n        INSERTED: \"inserted.bs.tooltip\",\n        CLICK: \"click.bs.tooltip\",\n        FOCUSIN: \"focusin.bs.tooltip\",\n        FOCUSOUT: \"focusout.bs.tooltip\",\n        MOUSEENTER: \"mouseenter.bs.tooltip\",\n        MOUSELEAVE: \"mouseleave.bs.tooltip\"\n    };\n    class Fe extends B {\n        static get Default() {\n            return $e;\n        }\n        static get NAME() {\n            return \"tooltip\";\n        }\n        static get Event() {\n            return Ue;\n        }\n        static get DefaultType() {\n            return qe;\n        }\n        enable() {\n            this._isEnabled = !0;\n        }\n        disable() {\n            this._isEnabled = !1;\n        }\n        toggleEnabled() {\n            this._isEnabled = !this._isEnabled;\n        }\n        toggle(t) {\n            if (this._isEnabled) if (t) {\n                const e = this._initializeOnDelegatedTarget(t);\n                e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);\n            } else {\n                if (this.getTipElement().classList.contains(\"show\")) return void this._leave(null, this);\n                this._enter(null, this);\n            }\n        }\n        dispose() {\n            clearTimeout(this._timeout), P.off(this._element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this.tip && this.tip.remove(), this._popper && this._popper.destroy(), super.dispose();\n        }\n        show() {\n            if (\"none\" === this._element.style.display) throw new Error(\"Please use show on visible elements\");\n            if (!this.isWithContent() || !this._isEnabled) return;\n            const t = P.trigger(this._element, this.constructor.Event.SHOW), i = d(this._element), n = null === i ? this._element.ownerDocument.documentElement.contains(this._element) : i.contains(this._element);\n            if (t.defaultPrevented || !n) return;\n            const s = this.getTipElement(), o = e(this.constructor.NAME);\n            s.setAttribute(\"id\", o), this._element.setAttribute(\"aria-describedby\", o), this.setContent(), this._config.animation && s.classList.add(\"fade\");\n            const r = \"function\" == typeof this._config.placement ? this._config.placement.call(this, s, this._element) : this._config.placement, a = this._getAttachment(r);\n            this._addAttachmentClass(a);\n            const { container: l } = this._config;\n            R.set(s, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.appendChild(s), P.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = ue(this._element, s, this._getPopperConfig(a)), s.classList.add(\"show\");\n            const c = \"function\" == typeof this._config.customClass ? this._config.customClass() : this._config.customClass;\n            c && s.classList.add(...c.split(\" \")), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((t)=>{\n                P.on(t, \"mouseover\", u);\n            });\n            const h = this.tip.classList.contains(\"fade\");\n            this._queueCallback(()=>{\n                const t = this._hoverState;\n                this._hoverState = null, P.trigger(this._element, this.constructor.Event.SHOWN), \"out\" === t && this._leave(null, this);\n            }, this.tip, h);\n        }\n        hide() {\n            if (!this._popper) return;\n            const t = this.getTipElement();\n            if (P.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;\n            t.classList.remove(\"show\"), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((t)=>P.off(t, \"mouseover\", u)), this._activeTrigger.click = !1, this._activeTrigger.focus = !1, this._activeTrigger.hover = !1;\n            const e = this.tip.classList.contains(\"fade\");\n            this._queueCallback(()=>{\n                this._isWithActiveTrigger() || (\"show\" !== this._hoverState && t.remove(), this._cleanTipClass(), this._element.removeAttribute(\"aria-describedby\"), P.trigger(this._element, this.constructor.Event.HIDDEN), this._popper && (this._popper.destroy(), this._popper = null));\n            }, this.tip, e), this._hoverState = \"\";\n        }\n        update() {\n            null !== this._popper && this._popper.update();\n        }\n        isWithContent() {\n            return Boolean(this.getTitle());\n        }\n        getTipElement() {\n            if (this.tip) return this.tip;\n            const t = document.createElement(\"div\");\n            return t.innerHTML = this._config.template, this.tip = t.children[0], this.tip;\n        }\n        setContent() {\n            const e = this.getTipElement();\n            this.setElementContent(t.findOne(\".tooltip-inner\", e), this.getTitle()), e.classList.remove(\"fade\", \"show\");\n        }\n        setElementContent(t, e) {\n            if (null !== t) return r(e) ? (e = a(e), void (this._config.html ? e.parentNode !== t && (t.innerHTML = \"\", t.appendChild(e)) : t.textContent = e.textContent)) : void (this._config.html ? (this._config.sanitize && (e = Re(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e);\n        }\n        getTitle() {\n            let t = this._element.getAttribute(\"data-bs-original-title\");\n            return t || (t = \"function\" == typeof this._config.title ? this._config.title.call(this._element) : this._config.title), t;\n        }\n        updateAttachment(t) {\n            return \"right\" === t ? \"end\" : \"left\" === t ? \"start\" : t;\n        }\n        _initializeOnDelegatedTarget(t, e) {\n            const i = this.constructor.DATA_KEY;\n            return (e = e || R.get(t.delegateTarget, i)) || (e = new this.constructor(t.delegateTarget, this._getDelegateConfig()), R.set(t.delegateTarget, i, e)), e;\n        }\n        _getOffset() {\n            const { offset: t } = this._config;\n            return \"string\" == typeof t ? t.split(\",\").map((t)=>Number.parseInt(t, 10)) : \"function\" == typeof t ? (e)=>t(e, this._element) : t;\n        }\n        _getPopperConfig(t) {\n            const e = {\n                placement: t,\n                modifiers: [\n                    {\n                        name: \"flip\",\n                        options: {\n                            fallbackPlacements: this._config.fallbackPlacements\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    },\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"arrow\",\n                        options: {\n                            element: \".\".concat(this.constructor.NAME, \"-arrow\")\n                        }\n                    },\n                    {\n                        name: \"onChange\",\n                        enabled: !0,\n                        phase: \"afterWrite\",\n                        fn: (t)=>this._handlePopperPlacementChange(t)\n                    }\n                ],\n                onFirstUpdate: (t)=>{\n                    t.options.placement !== t.placement && this._handlePopperPlacementChange(t);\n                }\n            };\n            return {\n                ...e,\n                ...\"function\" == typeof this._config.popperConfig ? this._config.popperConfig(e) : this._config.popperConfig\n            };\n        }\n        _addAttachmentClass(t) {\n            this.getTipElement().classList.add(\"bs-tooltip-\" + this.updateAttachment(t));\n        }\n        _getAttachment(t) {\n            return ze[t.toUpperCase()];\n        }\n        _setListeners() {\n            this._config.trigger.split(\" \").forEach((t)=>{\n                if (\"click\" === t) P.on(this._element, this.constructor.Event.CLICK, this._config.selector, (t)=>this.toggle(t));\n                else if (\"manual\" !== t) {\n                    const e = \"hover\" === t ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN, i = \"hover\" === t ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n                    P.on(this._element, e, this._config.selector, (t)=>this._enter(t)), P.on(this._element, i, this._config.selector, (t)=>this._leave(t));\n                }\n            }), this._hideModalHandler = ()=>{\n                this._element && this.hide();\n            }, P.on(this._element.closest(\".modal\"), \"hide.bs.modal\", this._hideModalHandler), this._config.selector ? this._config = {\n                ...this._config,\n                trigger: \"manual\",\n                selector: \"\"\n            } : this._fixTitle();\n        }\n        _fixTitle() {\n            const t = this._element.getAttribute(\"title\"), e = typeof this._element.getAttribute(\"data-bs-original-title\");\n            (t || \"string\" !== e) && (this._element.setAttribute(\"data-bs-original-title\", t || \"\"), !t || this._element.getAttribute(\"aria-label\") || this._element.textContent || this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"title\", \"\"));\n        }\n        _enter(t, e) {\n            e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[\"focusin\" === t.type ? \"focus\" : \"hover\"] = !0), e.getTipElement().classList.contains(\"show\") || \"show\" === e._hoverState ? e._hoverState = \"show\" : (clearTimeout(e._timeout), e._hoverState = \"show\", e._config.delay && e._config.delay.show ? e._timeout = setTimeout(()=>{\n                \"show\" === e._hoverState && e.show();\n            }, e._config.delay.show) : e.show());\n        }\n        _leave(t, e) {\n            e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[\"focusout\" === t.type ? \"focus\" : \"hover\"] = e._element.contains(t.relatedTarget)), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = \"out\", e._config.delay && e._config.delay.hide ? e._timeout = setTimeout(()=>{\n                \"out\" === e._hoverState && e.hide();\n            }, e._config.delay.hide) : e.hide());\n        }\n        _isWithActiveTrigger() {\n            for(const t in this._activeTrigger)if (this._activeTrigger[t]) return !0;\n            return !1;\n        }\n        _getConfig(t) {\n            const e = U.getDataAttributes(this._element);\n            return Object.keys(e).forEach((t)=>{\n                We.has(t) && delete e[t];\n            }), (t = {\n                ...this.constructor.Default,\n                ...e,\n                ...\"object\" == typeof t && t ? t : {}\n            }).container = !1 === t.container ? document.body : a(t.container), \"number\" == typeof t.delay && (t.delay = {\n                show: t.delay,\n                hide: t.delay\n            }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), l(\"tooltip\", t, this.constructor.DefaultType), t.sanitize && (t.template = Re(t.template, t.allowList, t.sanitizeFn)), t;\n        }\n        _getDelegateConfig() {\n            const t = {};\n            if (this._config) for(const e in this._config)this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);\n            return t;\n        }\n        _cleanTipClass() {\n            const t = this.getTipElement(), e = t.getAttribute(\"class\").match(Be);\n            null !== e && e.length > 0 && e.map((t)=>t.trim()).forEach((e)=>t.classList.remove(e));\n        }\n        _handlePopperPlacementChange(t) {\n            const { state: e } = t;\n            e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Fe.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n        constructor(t, e){\n            if (void 0 === fe) throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n            super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();\n        }\n    }\n    _(Fe);\n    const Ve = new RegExp(\"(^|\\\\s)bs-popover\\\\S+\", \"g\"), Ke = {\n        ...Fe.Default,\n        placement: \"right\",\n        offset: [\n            0,\n            8\n        ],\n        trigger: \"click\",\n        content: \"\",\n        template: '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>'\n    }, Xe = {\n        ...Fe.DefaultType,\n        content: \"(string|element|function)\"\n    }, Ye = {\n        HIDE: \"hide.bs.popover\",\n        HIDDEN: \"hidden.bs.popover\",\n        SHOW: \"show.bs.popover\",\n        SHOWN: \"shown.bs.popover\",\n        INSERTED: \"inserted.bs.popover\",\n        CLICK: \"click.bs.popover\",\n        FOCUSIN: \"focusin.bs.popover\",\n        FOCUSOUT: \"focusout.bs.popover\",\n        MOUSEENTER: \"mouseenter.bs.popover\",\n        MOUSELEAVE: \"mouseleave.bs.popover\"\n    };\n    class Qe extends Fe {\n        static get Default() {\n            return Ke;\n        }\n        static get NAME() {\n            return \"popover\";\n        }\n        static get Event() {\n            return Ye;\n        }\n        static get DefaultType() {\n            return Xe;\n        }\n        isWithContent() {\n            return this.getTitle() || this._getContent();\n        }\n        getTipElement() {\n            return this.tip || (this.tip = super.getTipElement(), this.getTitle() || t.findOne(\".popover-header\", this.tip).remove(), this._getContent() || t.findOne(\".popover-body\", this.tip).remove()), this.tip;\n        }\n        setContent() {\n            const e = this.getTipElement();\n            this.setElementContent(t.findOne(\".popover-header\", e), this.getTitle());\n            let i = this._getContent();\n            \"function\" == typeof i && (i = i.call(this._element)), this.setElementContent(t.findOne(\".popover-body\", e), i), e.classList.remove(\"fade\", \"show\");\n        }\n        _addAttachmentClass(t) {\n            this.getTipElement().classList.add(\"bs-popover-\" + this.updateAttachment(t));\n        }\n        _getContent() {\n            return this._element.getAttribute(\"data-bs-content\") || this._config.content;\n        }\n        _cleanTipClass() {\n            const t = this.getTipElement(), e = t.getAttribute(\"class\").match(Ve);\n            null !== e && e.length > 0 && e.map((t)=>t.trim()).forEach((e)=>t.classList.remove(e));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Qe.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n    }\n    _(Qe);\n    const Ge = {\n        offset: 10,\n        method: \"auto\",\n        target: \"\"\n    }, Ze = {\n        offset: \"number\",\n        method: \"string\",\n        target: \"(string|element)\"\n    };\n    class Je extends B {\n        static get Default() {\n            return Ge;\n        }\n        static get NAME() {\n            return \"scrollspy\";\n        }\n        refresh() {\n            const e = this._scrollElement === this._scrollElement.window ? \"offset\" : \"position\", i = \"auto\" === this._config.method ? e : this._config.method, s = \"position\" === i ? this._getScrollTop() : 0;\n            this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), t.find(this._selector).map((e)=>{\n                const o = n(e), r = o ? t.findOne(o) : null;\n                if (r) {\n                    const t = r.getBoundingClientRect();\n                    if (t.width || t.height) return [\n                        U[i](r).top + s,\n                        o\n                    ];\n                }\n                return null;\n            }).filter((t)=>t).sort((t, e)=>t[0] - e[0]).forEach((t)=>{\n                this._offsets.push(t[0]), this._targets.push(t[1]);\n            });\n        }\n        dispose() {\n            P.off(this._scrollElement, \".bs.scrollspy\"), super.dispose();\n        }\n        _getConfig(t) {\n            if (\"string\" != typeof (t = {\n                ...Ge,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t && t ? t : {}\n            }).target && r(t.target)) {\n                let { id: i } = t.target;\n                i || (i = e(\"scrollspy\"), t.target.id = i), t.target = \"#\" + i;\n            }\n            return l(\"scrollspy\", t, Ze), t;\n        }\n        _getScrollTop() {\n            return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n        }\n        _getScrollHeight() {\n            return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n        }\n        _getOffsetHeight() {\n            return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n        }\n        _process() {\n            const t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), i = this._config.offset + e - this._getOffsetHeight();\n            if (this._scrollHeight !== e && this.refresh(), t >= i) {\n                const t = this._targets[this._targets.length - 1];\n                this._activeTarget !== t && this._activate(t);\n            } else {\n                if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();\n                for(let e = this._offsets.length; e--;)this._activeTarget !== this._targets[e] && t >= this._offsets[e] && (void 0 === this._offsets[e + 1] || t < this._offsets[e + 1]) && this._activate(this._targets[e]);\n            }\n        }\n        _activate(e) {\n            this._activeTarget = e, this._clear();\n            const i = this._selector.split(\",\").map((t)=>\"\".concat(t, '[data-bs-target=\"').concat(e, '\"],').concat(t, '[href=\"').concat(e, '\"]')), n = t.findOne(i.join(\",\"));\n            n.classList.contains(\"dropdown-item\") ? (t.findOne(\".dropdown-toggle\", n.closest(\".dropdown\")).classList.add(\"active\"), n.classList.add(\"active\")) : (n.classList.add(\"active\"), t.parents(n, \".nav, .list-group\").forEach((e)=>{\n                t.prev(e, \".nav-link, .list-group-item\").forEach((t)=>t.classList.add(\"active\")), t.prev(e, \".nav-item\").forEach((e)=>{\n                    t.children(e, \".nav-link\").forEach((t)=>t.classList.add(\"active\"));\n                });\n            })), P.trigger(this._scrollElement, \"activate.bs.scrollspy\", {\n                relatedTarget: e\n            });\n        }\n        _clear() {\n            t.find(this._selector).filter((t)=>t.classList.contains(\"active\")).forEach((t)=>t.classList.remove(\"active\"));\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = Je.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n        constructor(t, e){\n            super(t), this._scrollElement = \"BODY\" === this._element.tagName ? window : this._element, this._config = this._getConfig(e), this._selector = \"\".concat(this._config.target, \" .nav-link, \").concat(this._config.target, \" .list-group-item, \").concat(this._config.target, \" .dropdown-item\"), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, P.on(this._scrollElement, \"scroll.bs.scrollspy\", ()=>this._process()), this.refresh(), this._process();\n        }\n    }\n    P.on(window, \"load.bs.scrollspy.data-api\", ()=>{\n        t.find('[data-bs-spy=\"scroll\"]').forEach((t)=>new Je(t));\n    }), _(Je);\n    class ti extends B {\n        static get NAME() {\n            return \"tab\";\n        }\n        show() {\n            if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(\"active\")) return;\n            let e;\n            const i = s(this._element), n = this._element.closest(\".nav, .list-group\");\n            if (n) {\n                const i = \"UL\" === n.nodeName || \"OL\" === n.nodeName ? \":scope > li > .active\" : \".active\";\n                e = t.find(i, n), e = e[e.length - 1];\n            }\n            const o = e ? P.trigger(e, \"hide.bs.tab\", {\n                relatedTarget: this._element\n            }) : null;\n            if (P.trigger(this._element, \"show.bs.tab\", {\n                relatedTarget: e\n            }).defaultPrevented || null !== o && o.defaultPrevented) return;\n            this._activate(this._element, n);\n            const r = ()=>{\n                P.trigger(e, \"hidden.bs.tab\", {\n                    relatedTarget: this._element\n                }), P.trigger(this._element, \"shown.bs.tab\", {\n                    relatedTarget: e\n                });\n            };\n            i ? this._activate(i, i.parentNode, r) : r();\n        }\n        _activate(e, i, n) {\n            const s = (!i || \"UL\" !== i.nodeName && \"OL\" !== i.nodeName ? t.children(i, \".active\") : t.find(\":scope > li > .active\", i))[0], o = n && s && s.classList.contains(\"fade\"), r = ()=>this._transitionComplete(e, s, n);\n            s && o ? (s.classList.remove(\"show\"), this._queueCallback(r, e, !0)) : r();\n        }\n        _transitionComplete(e, i, n) {\n            if (i) {\n                i.classList.remove(\"active\");\n                const e = t.findOne(\":scope > .dropdown-menu .active\", i.parentNode);\n                e && e.classList.remove(\"active\"), \"tab\" === i.getAttribute(\"role\") && i.setAttribute(\"aria-selected\", !1);\n            }\n            e.classList.add(\"active\"), \"tab\" === e.getAttribute(\"role\") && e.setAttribute(\"aria-selected\", !0), f(e), e.classList.contains(\"fade\") && e.classList.add(\"show\");\n            let s = e.parentNode;\n            if (s && \"LI\" === s.nodeName && (s = s.parentNode), s && s.classList.contains(\"dropdown-menu\")) {\n                const i = e.closest(\".dropdown\");\n                i && t.find(\".dropdown-toggle\", i).forEach((t)=>t.classList.add(\"active\")), e.setAttribute(\"aria-expanded\", !0);\n            }\n            n && n();\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = ti.getOrCreateInstance(this);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t]();\n                }\n            });\n        }\n    }\n    P.on(document, \"click.bs.tab.data-api\", '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]', function(t) {\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && t.preventDefault(), h(this) || ti.getOrCreateInstance(this).show();\n    }), _(ti);\n    const ei = {\n        animation: \"boolean\",\n        autohide: \"boolean\",\n        delay: \"number\"\n    }, ii = {\n        animation: !0,\n        autohide: !0,\n        delay: 5e3\n    };\n    class ni extends B {\n        static get DefaultType() {\n            return ei;\n        }\n        static get Default() {\n            return ii;\n        }\n        static get NAME() {\n            return \"toast\";\n        }\n        show() {\n            P.trigger(this._element, \"show.bs.toast\").defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add(\"fade\"), this._element.classList.remove(\"hide\"), f(this._element), this._element.classList.add(\"showing\"), this._queueCallback(()=>{\n                this._element.classList.remove(\"showing\"), this._element.classList.add(\"show\"), P.trigger(this._element, \"shown.bs.toast\"), this._maybeScheduleHide();\n            }, this._element, this._config.animation));\n        }\n        hide() {\n            this._element.classList.contains(\"show\") && (P.trigger(this._element, \"hide.bs.toast\").defaultPrevented || (this._element.classList.remove(\"show\"), this._queueCallback(()=>{\n                this._element.classList.add(\"hide\"), P.trigger(this._element, \"hidden.bs.toast\");\n            }, this._element, this._config.animation)));\n        }\n        dispose() {\n            this._clearTimeout(), this._element.classList.contains(\"show\") && this._element.classList.remove(\"show\"), super.dispose();\n        }\n        _getConfig(t) {\n            return t = {\n                ...ii,\n                ...U.getDataAttributes(this._element),\n                ...\"object\" == typeof t && t ? t : {}\n            }, l(\"toast\", t, this.constructor.DefaultType), t;\n        }\n        _maybeScheduleHide() {\n            this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(()=>{\n                this.hide();\n            }, this._config.delay)));\n        }\n        _onInteraction(t, e) {\n            switch(t.type){\n                case \"mouseover\":\n                case \"mouseout\":\n                    this._hasMouseInteraction = e;\n                    break;\n                case \"focusin\":\n                case \"focusout\":\n                    this._hasKeyboardInteraction = e;\n            }\n            if (e) return void this._clearTimeout();\n            const i = t.relatedTarget;\n            this._element === i || this._element.contains(i) || this._maybeScheduleHide();\n        }\n        _setListeners() {\n            P.on(this._element, \"click.dismiss.bs.toast\", '[data-bs-dismiss=\"toast\"]', ()=>this.hide()), P.on(this._element, \"mouseover.bs.toast\", (t)=>this._onInteraction(t, !0)), P.on(this._element, \"mouseout.bs.toast\", (t)=>this._onInteraction(t, !1)), P.on(this._element, \"focusin.bs.toast\", (t)=>this._onInteraction(t, !0)), P.on(this._element, \"focusout.bs.toast\", (t)=>this._onInteraction(t, !1));\n        }\n        _clearTimeout() {\n            clearTimeout(this._timeout), this._timeout = null;\n        }\n        static jQueryInterface(t) {\n            return this.each(function() {\n                const e = ni.getOrCreateInstance(this, t);\n                if (\"string\" == typeof t) {\n                    if (void 0 === e[t]) throw new TypeError('No method named \"'.concat(t, '\"'));\n                    e[t](this);\n                }\n            });\n        }\n        constructor(t, e){\n            super(t), this._config = this._getConfig(e), this._timeout = null, this._hasMouseInteraction = !1, this._hasKeyboardInteraction = !1, this._setListeners();\n        }\n    }\n    return _(ni), {\n        Alert: W,\n        Button: q,\n        Carousel: Z,\n        Collapse: et,\n        Dropdown: Ae,\n        Modal: De,\n        Offcanvas: Ne,\n        Popover: Qe,\n        ScrollSpy: Je,\n        Tab: ti,\n        Toast: ni,\n        Tooltip: Fe\n    };\n}); //# sourceMappingURL=bootstrap.bundle.min.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./static/bootstrap/js/bootstrap.bundle.min.js\n"));

/***/ })

});